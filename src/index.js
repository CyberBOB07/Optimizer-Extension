// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isUpdating = false;
let updateQueue = false;

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
function createInfoWindow() {
    if (infoWindow) {
        console.log('Window already exists, skipping creation');
        return infoWindow;
    }

    console.log('Creating new info window');
    const window = document.createElement('div');
    window.className = 'tv-optimizer-window';
    window.style.cssText = `
        position: fixed;
        top: 50px;
        right: 50px;
        background: #131722;
        color: #d1d4dc;
        border: 1px solid #363c4e;
        border-radius: 3px;
        padding: 8px;
        z-index: 999;
        min-width: 200px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        font-size: 12px;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        user-select: none;
    `;
    
    document.body.appendChild(window);
    infoWindow = window;
    makeWindowDraggable(window);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    setTimeout(() => updateInfoWindow(window), 0);
    
    return window;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞
function updateInfoWindow(window = infoWindow) {
    if (!window) {
        console.log('No window to update');
        return;
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
    if (isUpdating) {
        console.log('Already updating, queuing next update');
        updateQueue = true;
        return;
    }

    try {
        isUpdating = true;
        console.log('Updating info window');
        
        const info = getTradingInfo();
        const results = parseBacktestResults();

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π div –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const content = document.createElement('div');
        content.className = 'content';
        content.innerHTML = `
            <div style="margin-bottom: 4px; color: #d1d4dc;">TradingView Optimizer</div>
            <div style="font-size: 11px; opacity: 0.8; color: #787b86;">
                <div>Symbol: ${info.symbol}</div>
                <div>Interval: ${info.interval}</div>
                <div>Settings: ${isStrategySettingsDetected ? '‚úÖ' : '‚ùå'}</div>
                <div>Tracking: ${isTrackingMode ? 'üîç' : '‚è∏Ô∏è'}</div>
            </div>
            ${!isStrategySettingsDetected ? `
                <button class="tv-optimizer-button" id="detectButton" style="
                    background: #2962ff;
                    color: #fff;
                    border: none;
                    border-radius: 2px;
                    padding: 4px 8px;
                    margin-top: 8px;
                    cursor: pointer;
                    font-size: 11px;
                    width: 100%;
                ">Detect Settings Button</button>
            ` : `
                <button class="tv-optimizer-button" id="openButton" style="
                    background: #2962ff;
                    color: #fff;
                    border: none;
                    border-radius: 2px;
                    padding: 4px 8px;
                    margin-top: 8px;
                    cursor: pointer;
                    font-size: 11px;
                    width: 100%;
                ">Open Strategy Settings</button>
            `}
            ${results ? `
                <div style="margin-top: 8px; border-top: 1px solid #363c4e; padding-top: 8px;">
                    <div style="margin-bottom: 4px;">Backtest Results:</div>
                    <div style="font-size: 11px;">
                        <div>Net Profit: <span class="${getValueClass(results.netProfit)}">${formatUSDT(results.netProfit)} (${formatPercent(results.netProfitPercent)})</span></div>
                        <div>Total Trades: ${results.totalTrades}</div>
                        <div>Percent Profitable: ${formatPercent(results.percentProfitable)}</div>
                        <div>Profit Factor: ${formatNumber(results.profitFactor)}</div>
                        <div>Max Drawdown: ${formatUSDT(results.maxDrawdown)} (${formatPercent(results.maxDrawdownPercent)})</div>
                        <div>Avg Trade: ${formatUSDT(results.avgTrade)} (${formatPercent(results.avgTradePercent)})</div>
                        <div>Avg # Bars: ${results.avgBarsInTrade}</div>
                    </div>
                </div>
            ` : ''}
        `;

        // –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        window.innerHTML = '';
        window.appendChild(content);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if (!isStrategySettingsDetected) {
            const detectButton = window.querySelector('#detectButton');
            if (detectButton) {
                detectButton.addEventListener('click', detectStrategySettings);
            }
        } else {
            const openButton = window.querySelector('#openButton');
            if (openButton) {
                openButton.addEventListener('click', openStrategySettings);
            }
        }
    } finally {
        isUpdating = false;
        if (updateQueue) {
            updateQueue = false;
            updateInfoWindow();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
function getTradingInfo() {
    try {
        // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞: –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Å–∏–º–≤–æ–ª–æ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ç—É–ª–±–∞—Ä–µ
        const symbolElement = document.querySelector('[data-name="legend-series-item"] [data-name="legend-source-title"]');
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        const intervalElement = document.querySelector('button.title-l31H9iuA.accessible-l31H9iuA[aria-label="Change interval"]');
        
        return {
            symbol: symbolElement ? symbolElement.textContent.trim() : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            interval: intervalElement ? intervalElement.textContent.trim() : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return {
            symbol: '–û—à–∏–±–∫–∞',
            interval: '–û—à–∏–±–∫–∞'
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let infoWindow = null;
let isTrackingMode = false;
let isStrategySettingsDetected = false;
let strategySettingsSelector = '';
let strategyButtonIndex = -1;
const DEFAULT_SETTINGS_BUTTON_SELECTOR = 'button[title="Settings"].apply-common-tooltip';

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
let backtestResults = {
    netProfit: null,
    netProfitPercent: null,
    totalTrades: null,
    percentProfitable: null,
    profitFactor: null,
    maxDrawdown: null,
    maxDrawdownPercent: null,
    avgTrade: null,
    avgTradePercent: null,
    avgBarsInTrade: null
};

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
function parseBacktestResults() {
    const container = document.querySelector('.container-Yvm0jjs7');
    if (!container) {
        console.log('Container not found');
        return null;
    }

    try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        const cells = container.querySelectorAll('.containerCell-Yvm0jjs7');
        if (!cells || cells.length === 0) {
            console.log('No cells found');
            return null;
        }

        const results = {};
        
        cells.forEach(cell => {
            const title = cell.querySelector('.title-Yvm0jjs7')?.textContent;
            const value = cell.querySelector('.secondRow-Yvm0jjs7 div:first-child')?.textContent;
            const additionalPercent = cell.querySelector('.additionalPercent-Yvm0jjs7')?.textContent;
            
            if (title && value) {
                switch (title.trim()) {
                    case 'Net Profit':
                        results.netProfit = parseFloat(value.replace(/[^0-9.-]/g, ''));
                        if (additionalPercent) {
                            results.netProfitPercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));
                        }
                        break;
                    case 'Total Closed Trades':
                        results.totalTrades = parseInt(value);
                        break;
                    case 'Percent Profitable':
                        results.percentProfitable = parseFloat(value.replace('%', ''));
                        break;
                    case 'Profit Factor':
                        results.profitFactor = parseFloat(value);
                        break;
                    case 'Max Drawdown':
                        results.maxDrawdown = parseFloat(value.replace(/[^0-9.-]/g, ''));
                        if (additionalPercent) {
                            results.maxDrawdownPercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));
                        }
                        break;
                    case 'Avg Trade':
                        results.avgTrade = parseFloat(value.replace(/[^0-9.-]/g, ''));
                        if (additionalPercent) {
                            results.avgTradePercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));
                        }
                        break;
                    case 'Avg # Bars in Trades':
                        results.avgBarsInTrade = parseFloat(value);
                        break;
                }
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (results.netProfit !== undefined && results.totalTrades !== undefined) {
            console.log('Results parsed successfully:', results);
            return results;
        }

        console.log('Not all required results found');
        return null;
    } catch (error) {
        console.error('Error parsing results:', error);
        return null;
    }
}

function formatNumber(num, decimals = 2) {
    if (num === null || num === undefined || isNaN(num)) return '‚Äî';
    return num.toFixed(decimals);
}

function formatPercent(num) {
    if (num === null || num === undefined || isNaN(num)) return '‚Äî';
    return `${num.toFixed(2)}%`;
}

function formatUSDT(num) {
    if (num === null || num === undefined || isNaN(num)) return '‚Äî';
    return `${num.toFixed(2)} USDT`;
}

function getValueClass(num) {
    if (num === null || num === undefined || isNaN(num)) return '';
    return num > 0 ? 'positive' : num < 0 ? 'negative' : '';
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function checkDefaultSettingsButton() {
    console.log('Checking default settings button');
    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);
    console.log('Default button found:', defaultButton);
    
    if (defaultButton) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        strategySettingsSelector = DEFAULT_SETTINGS_BUTTON_SELECTOR;
        strategyButtonIndex = 0; // –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞
        isStrategySettingsDetected = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        chrome.storage.local.set({
            strategySettingsDetected: true,
            strategySettingsSelector: strategySettingsSelector,
            strategyButtonIndex: strategyButtonIndex
        }, () => {
            console.log('Default settings button saved');
            updateInfoWindow();
        });
        
        return true;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function openStrategySettings() {
    console.log('Trying to open strategy settings');
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);
    console.log('Default settings button:', defaultButton);
    
    if (defaultButton) {
        console.log('Using default settings button');
        simulateClick(defaultButton);
        return true;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    if (strategySettingsSelector && strategySettingsSelector !== DEFAULT_SETTINGS_BUTTON_SELECTOR) {
        console.log('Trying to find settings button with selector:', strategySettingsSelector, 'index:', strategyButtonIndex);
        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));
        console.log('Found buttons:', allButtons.length);
        
        if (allButtons.length > strategyButtonIndex) {
            const settingsButton = allButtons[strategyButtonIndex];
            console.log('Using saved button:', settingsButton);
            simulateClick(settingsButton);
            return true;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    showNotification('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–∫–ª—é—á–∞—é —Ä–µ–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ');
    toggleTrackingMode(true);
    return false;
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function resetSettings() {
    console.log('Resetting settings');
    isStrategySettingsDetected = false;
    strategySettingsSelector = '';
    strategyButtonIndex = -1;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chrome.storage.local.set({
        strategySettingsDetected: false,
        strategySettingsSelector: '',
        strategyButtonIndex: -1
    }, () => {
        console.log('Settings reset');
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã ');
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        if (infoWindow) {
            document.body.removeChild(infoWindow);
        }
        createInfoWindow();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–∫–∞
function simulateClick(element) {
    console.log('Simulating click on element:', element);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
    try {
        // 1. –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ click
        const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        element.dispatchEvent(clickEvent);
        
        // 2. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º mousedown/mouseup
        const mouseDownEvent = new MouseEvent('mousedown', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        const mouseUpEvent = new MouseEvent('mouseup', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        element.dispatchEvent(mouseDownEvent);
        element.dispatchEvent(mouseUpEvent);
        
        // 3. –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫
        element.click();
        
    } catch (error) {
        console.error('Error simulating click:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
function makeWindowDraggable(window) {
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;
    
    function dragStart(e) {
        if (e.type === "touchstart") {
            initialX = e.touches[0].clientX - xOffset;
            initialY = e.touches[0].clientY - yOffset;
        } else {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;
        }
        
        if (e.target === window) {
            isDragging = true;
        }
    }
    
    function dragEnd() {
        if (!isDragging) return;
        
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        chrome.storage.local.set({
            windowPosition: {
                top: window.style.top,
                right: window.style.right
            }
        });
    }
    
    function drag(e) {
        if (!isDragging) return;
        
        e.preventDefault();
        
        if (e.type === "touchmove") {
            currentX = e.touches[0].clientX - initialX;
            currentY = e.touches[0].clientY - initialY;
        } else {
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;
        }
        
        xOffset = currentX;
        yOffset = currentY;
        window.style.transform = `translate(${currentX}px, ${currentY}px)`;
    }
    
    window.addEventListener("touchstart", dragStart, false);
    window.addEventListener("touchend", dragEnd, false);
    window.addEventListener("touchmove", drag, false);
    window.addEventListener("mousedown", dragStart, false);
    window.addEventListener("mouseup", dragEnd, false);
    window.addEventListener("mousemove", drag, false);
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
function showInfoWindow() {
    console.log('Showing info window');
    if (!infoWindow) {
        const window = createInfoWindow();
        if (window) {
            console.log('Window created successfully');
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞
            waitForBacktestResults();
        }
    } else {
        console.log('Window already exists, updating');
        updateInfoWindow();
    }
}

function hideInfoWindow() {
    console.log('Hiding info window');
    if (infoWindow) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
        cleanupObservers();
        infoWindow.remove();
        infoWindow = null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
function toggleTrackingMode(enable) {
    console.log('toggleTrackingMode:', enable);
    isTrackingMode = enable;
    
    if (enable) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤—Å–µ —ç—Ç–∞–ø—ã –∫–ª–∏–∫–∞
        document.addEventListener('mousedown', detectStrategySettings, true);
        document.addEventListener('mouseup', detectStrategySettings, true);
        document.addEventListener('click', detectStrategySettings, true);
        showNotification('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ');
    } else {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.removeEventListener('mousedown', detectStrategySettings, true);
        document.removeEventListener('mouseup', detectStrategySettings, true);
        document.removeEventListener('click', detectStrategySettings, true);
        showNotification('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ');
    }
    
    updateInfoWindow();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function detectStrategySettings(event) {
    console.log('detectStrategySettings called, tracking mode:', isTrackingMode);
    
    if (!isTrackingMode) return;
    
    const target = event.target;
    console.log('Click target:', target);
    console.log('Target attributes:', {
        class: target.className,
        dataName: target.getAttribute('data-name'),
        role: target.getAttribute('role'),
        ariaLabel: target.getAttribute('aria-label'),
        innerHTML: target.innerHTML
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    const settingsButton = target.closest('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j, [data-name="legend-settings-action"]');
    console.log('Found settings button:', settingsButton);
    
    if (settingsButton) {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
        event.returnValue = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        if (settingsButton.matches('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j')) {
            strategySettingsSelector = 'button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j';
        } else {
            strategySettingsSelector = '[data-name="legend-settings-action"]';
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));
        const buttonIndex = allButtons.indexOf(settingsButton);
        console.log('Button index:', buttonIndex, 'of', allButtons.length, 'buttons');
        strategyButtonIndex = buttonIndex;
        
        console.log('Using selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        isTrackingMode = false;
        document.removeEventListener('mousedown', detectStrategySettings, true);
        document.removeEventListener('mouseup', detectStrategySettings, true);
        document.removeEventListener('click', detectStrategySettings, true);
        
        // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('Setting isStrategySettingsDetected to true');
        isStrategySettingsDetected = true;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        console.log('Recreating info window...');
        if (infoWindow) {
            document.body.removeChild(infoWindow);
        }
        createInfoWindow();
        
        // –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        chrome.storage.local.set({
            strategySettingsDetected: true,
            strategySettingsSelector: strategySettingsSelector,
            strategyButtonIndex: strategyButtonIndex
        }, () => {
            console.log('Settings saved to storage');
            showNotification('–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! ');
        });
        
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: #131722;
        color: #d1d4dc;
        padding: 10px 20px;
        border-radius: 4px;
        z-index: 9999;
        border: 1px solid #363c4e;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('Received message:', request);
    
    if (request.type === 'GET_TRADING_INFO') {
        sendResponse(getTradingInfo());
    } else if (request.type === 'TOGGLE_INFO_WINDOW') {
        console.log('Toggle info window:', request.show);
        try {
            if (request.show) {
                showInfoWindow();
            } else {
                hideInfoWindow();
            }
            sendResponse({ success: true });
        } catch (error) {
            console.error('Error toggling window:', error);
            sendResponse({ success: false, error: error.message });
        }
    }
    return true;
});

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
chrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector', 'showInfoWindow'], (result) => {
    console.log('Loaded storage:', result);
    
    if (result.strategySettingsDetected) {
        isStrategySettingsDetected = true;
        strategySettingsSelector = result.strategySettingsSelector;
        strategyButtonIndex = result.strategyButtonIndex;
        console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ
    const showWindow = result.showInfoWindow !== undefined ? result.showInfoWindow : true;
    if (showWindow) {
        showInfoWindow();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
    waitForBacktestResults();
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –∏ —Å–∏–º–≤–æ–ª
    let lastUrl = location.href;
    let lastSymbol = '';
    let lastInterval = '';

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∏ —Å–∏–º–≤–æ–ª–∞
    function checkChanges() {
        const currentUrl = location.href;
        const info = getTradingInfo();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL
        if (currentUrl !== lastUrl) {
            console.log('URL changed:', currentUrl);
            lastUrl = currentUrl;
            
            // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–Ω–æ–ø–∫–∏
            if (!isStrategySettingsDetected) {
                setTimeout(checkDefaultSettingsButton, 2000);
            }
            waitForBacktestResults();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if (info.symbol !== lastSymbol || info.interval !== lastInterval) {
            console.log('Symbol or interval changed:', info.symbol, info.interval);
            lastSymbol = info.symbol;
            lastInterval = info.interval;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (infoWindow) {
                updateInfoWindow();
            }
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setInterval(checkChanges, 1000);
});

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, checking settings button');
    
    // –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
    setTimeout(() => {
        if (!isStrategySettingsDetected) {
            checkDefaultSettingsButton();
        }
    }, 2000);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
setInterval(() => {
    if (!isStrategySettingsDetected) {
        checkDefaultSettingsButton();
    }
}, 5000);

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function init() {
    console.log('Initializing TradingView Optimizer...');
    
    chrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector', 'showInfoWindow'], (result) => {
        console.log('Loaded storage:', result);
        
        if (result.strategySettingsDetected) {
            isStrategySettingsDetected = true;
            strategySettingsSelector = result.strategySettingsSelector;
            strategyButtonIndex = result.strategyButtonIndex;
            console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–æ
        const showWindow = result.showInfoWindow !== undefined ? result.showInfoWindow : true;
        if (showWindow) {
            showInfoWindow();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
        waitForBacktestResults();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (!isStrategySettingsDetected) {
            setTimeout(checkDefaultSettingsButton, 2000);
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
init();

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
let backtestObserver = null;
let resultsCheckInterval = null;
let containerSearchInterval = null;

function waitForBacktestResults() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (resultsCheckInterval) {
        clearInterval(resultsCheckInterval);
        resultsCheckInterval = null;
    }

    console.log('Starting to wait for backtest results');
    resultsCheckInterval = setInterval(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const container = document.querySelector('.container-Yvm0jjs7');
        if (!container) {
            console.log('Waiting for container...');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∏–º
        if (container.offsetParent === null) {
            console.log('Container is hidden, waiting...');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const results = parseBacktestResults();
        if (results) {
            console.log('Backtest results found:', results);
            clearInterval(resultsCheckInterval);
            resultsCheckInterval = null;

            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            startBacktestObserver();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            if (infoWindow) {
                updateInfoWindow();
            }
        } else {
            console.log('Results not ready yet...');
        }
    }, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    setTimeout(() => {
        if (resultsCheckInterval) {
            console.log('Timeout waiting for backtest results');
            clearInterval(resultsCheckInterval);
            resultsCheckInterval = null;
        }
    }, 10000);
}

function startBacktestObserver() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (containerSearchInterval) {
        clearInterval(containerSearchInterval);
        containerSearchInterval = null;
    }
    if (backtestObserver) {
        backtestObserver.disconnect();
        backtestObserver = null;
    }

    console.log('Starting backtest observer');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const startValuesObserver = (container) => {
        if (!container) return;

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        const valueElements = container.querySelectorAll('.positiveValue-Yvm0jjs7, .negativeValue-Yvm0jjs7, .additionalPercent-Yvm0jjs7');
        console.log('Found value elements:', valueElements.length);

        if (backtestObserver) {
            backtestObserver.disconnect();
        }

        backtestObserver = new MutationObserver((mutations) => {
            let needsUpdate = false;
            
            for (const mutation of mutations) {
                if (mutation.type === 'characterData') {
                    const targetElement = mutation.target.parentElement;
                    if (targetElement && (
                        targetElement.classList.contains('positiveValue-Yvm0jjs7') ||
                        targetElement.classList.contains('negativeValue-Yvm0jjs7') ||
                        targetElement.classList.contains('additionalPercent-Yvm0jjs7')
                    )) {
                        console.log('Value changed:', {
                            element: targetElement.className,
                            oldValue: mutation.oldValue,
                            newValue: mutation.target.textContent
                        });
                        needsUpdate = true;
                    }
                }
            }

            if (needsUpdate && infoWindow) {
                console.log('Updating info window due to value changes');
                updateResults();
            }
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ç–µ–∫—Å—Ç–∞ –≤–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        valueElements.forEach(element => {
            backtestObserver.observe(element, {
                characterData: true,
                characterDataOldValue: true,
                subtree: true
            });
        });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        backtestObserver.observe(container, {
            childList: true,
            subtree: true
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updateResults();
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const updateResults = () => {
        const results = parseBacktestResults();
        if (results && infoWindow) {
            console.log('Updating results:', results);
            updateInfoWindow();
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
    const findAndObserveContainer = () => {
        const container = document.querySelector('.container-Yvm0jjs7');
        if (container) {
            console.log('Found backtest results container');
            startValuesObserver(container);
            return true;
        }
        console.log('Container not found');
        return false;
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    containerSearchInterval = setInterval(() => {
        const container = document.querySelector('.container-Yvm0jjs7');
        if (container) {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            const results = parseBacktestResults();
            if (results) {
                console.log('Container exists, checking for updates');
                updateResults();
            }
        } else {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ
            console.log('Searching for container...');
            findAndObserveContainer();
        }
    }, 500);

    // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    findAndObserveContainer();
}

function cleanupObservers() {
    if (backtestObserver) {
        backtestObserver.disconnect();
        backtestObserver = null;
    }
    if (containerSearchInterval) {
        clearInterval(containerSearchInterval);
        containerSearchInterval = null;
    }
}
