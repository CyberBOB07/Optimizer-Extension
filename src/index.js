// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
function getTradingInfo() {
    try {
        // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞: –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Å–∏–º–≤–æ–ª–æ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ç—É–ª–±–∞—Ä–µ
        const symbolElement = document.querySelector('[data-name="legend-series-item"] [data-name="legend-source-title"]');
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        const intervalElement = document.querySelector('button.title-l31H9iuA.accessible-l31H9iuA[aria-label="Change interval"]');
        
        return {
            symbol: symbolElement ? symbolElement.textContent.trim() : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            interval: intervalElement ? intervalElement.textContent.trim() : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return {
            symbol: '–û—à–∏–±–∫–∞',
            interval: '–û—à–∏–±–∫–∞'
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let infoWindow = null;
let isStrategySettingsDetected = false;
let isTrackingMode = false;
let strategySettingsSelector = '';
let strategyButtonIndex = -1;
let updateInterval = null;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
const DEFAULT_SETTINGS_BUTTON_SELECTOR = '#bottom-area .backtesting .strategyGroup-zf0MHBzY .fixedContent-zf0MHBzY button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j';

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
function createInfoWindow() {
    const infoWindow = document.createElement('div');
    infoWindow.id = 'tv-optimizer-info';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    const style = document.createElement('style');
    style.textContent = `
        #tv-optimizer-info {
            position: fixed;
            top: 50px;
            right: 200px;
            background: #131722;
            color: #d1d4dc;
            padding: 10px;
            border-radius: 4px;
            z-index: 9999;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            user-select: none;
            cursor: move;
            border: 1px solid #363c4e;
            min-width: 200px;
        }
        .tv-optimizer-button {
            margin-top: 8px;
            padding: 6px 10px;
            background: #2962ff;
            border: none;
            border-radius: 4px;
            color: white;
            cursor: pointer;
            width: 100%;
            font-size: 11px;
            transition: background 0.2s;
        }
        .tv-optimizer-button:hover {
            background: #1e4bd8;
        }
    `;
    document.head.appendChild(style);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞
    updateInfoWindow(infoWindow);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.body.appendChild(infoWindow);
    
    // –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º
    makeWindowDraggable(infoWindow);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chrome.storage.local.get(['windowPosition', 'strategySettingsDetected', 'strategySettingsSelector', 'strategyButtonIndex'], (result) => {
        if (result.windowPosition) {
            infoWindow.style.top = result.windowPosition.top;
            infoWindow.style.right = result.windowPosition.right;
        }
        if (result.strategySettingsDetected) {
            isStrategySettingsDetected = true;
            strategySettingsSelector = result.strategySettingsSelector;
            strategyButtonIndex = result.strategyButtonIndex;
            updateInfoWindow(infoWindow);
        }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (updateInterval) {
        clearInterval(updateInterval);
    }
    updateInterval = setInterval(() => {
        console.log('Auto-updating info window');
        updateInfoWindow(infoWindow);
    }, 2000);
    
    return infoWindow;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞
function updateInfoWindow(window = infoWindow) {
    console.log('updateInfoWindow called', {
        window: window,
        isStrategySettingsDetected: isStrategySettingsDetected,
        isTrackingMode: isTrackingMode,
        strategySettingsSelector: strategySettingsSelector,
        strategyButtonIndex: strategyButtonIndex
    });
    
    if (!window) {
        console.log('No window to update');
        return;
    }
    
    const info = getTradingInfo();
    window.innerHTML = `
        <div class="content">
            <div style="margin-bottom: 4px;">TradingView Optimizer</div>
            <div style="font-size: 11px; opacity: 0.8;">
                <div>–°–∏–º–≤–æ–ª: ${info.symbol}</div>
                <div>–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${info.interval}</div>
                <div>Settings: ${isStrategySettingsDetected ? '‚úÖ' : '‚ùå'}</div>
                <div>Tracking: ${isTrackingMode ? 'üîç' : '‚è∏Ô∏è'}</div>
            </div>
            ${!isStrategySettingsDetected ? `
                <button class="tv-optimizer-button" id="trackButton">
                    ${isTrackingMode ? '–û—Ç–º–µ–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è' : '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫'}
                </button>
            ` : `
                <div style="display: flex; gap: 4px; align-items: center;">
                    <button class="tv-optimizer-button" id="openSettingsButton">
                        –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    </button>
                    <button class="tv-optimizer-button" id="resetButton" style="padding: 4px 8px; min-width: auto;" title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ">
                        üîÑ
                    </button>
                </div>
            `}
        </div>
    `;
    
    console.log('Window HTML updated');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if (!isStrategySettingsDetected) {
        const trackButton = window.querySelector('#trackButton');
        if (trackButton) {
            console.log('Adding track button handler');
            trackButton.addEventListener('click', () => {
                toggleTrackingMode(!isTrackingMode);
            });
        }
    } else {
        const openSettingsButton = window.querySelector('#openSettingsButton');
        if (openSettingsButton) {
            console.log('Adding settings button handler');
            openSettingsButton.addEventListener('click', openStrategySettings);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        const resetButton = window.querySelector('#resetButton');
        if (resetButton) {
            console.log('Adding reset button handler');
            resetButton.addEventListener('click', resetSettings);
        }
    }
    
    console.log('Window update complete');
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
let backtestResults = {
    netProfit: null,
    totalTrades: null,
    percentProfitable: null,
    profitFactor: null,
    maxDrawdown: null,
    netProfitPercent: null,
    maxDrawdownPercent: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
function parseBacktestResults() {
    try {
        const cells = document.querySelectorAll('.containerCell-Yvm0jjs7');
        if (!cells || cells.length === 0) {
            console.log('–Ø—á–µ–π–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return null;
        }

        cells.forEach(cell => {
            const titleElement = cell.querySelector('.title-Yvm0jjs7');
            const secondRow = cell.querySelector('.secondRow-Yvm0jjs7');
            
            if (!titleElement || !secondRow) return;
            
            const title = titleElement.textContent.trim();
            
            switch (title) {
                case 'Net Profit': {
                    const value = secondRow.querySelector('.positiveValue-Yvm0jjs7')?.textContent?.trim();
                    const percent = secondRow.querySelector('.additionalPercent-Yvm0jjs7')?.textContent?.trim();
                    backtestResults.netProfit = value;
                    backtestResults.netProfitPercent = percent;
                    break;
                }
                case 'Total Closed Trades': {
                    const value = secondRow.querySelector('div:first-child')?.textContent?.trim();
                    backtestResults.totalTrades = value;
                    break;
                }
                case 'Percent Profitable': {
                    const value = secondRow.querySelector('.positiveValue-Yvm0jjs7')?.textContent?.trim();
                    backtestResults.percentProfitable = value;
                    break;
                }
                case 'Profit Factor': {
                    const value = secondRow.querySelector('.positiveValue-Yvm0jjs7')?.textContent?.trim();
                    backtestResults.profitFactor = value;
                    break;
                }
                case 'Max Drawdown': {
                    const value = secondRow.querySelector('.negativeValue-Yvm0jjs7')?.textContent?.trim();
                    const percent = secondRow.querySelector('.additionalPercent-Yvm0jjs7')?.textContent?.trim();
                    backtestResults.maxDrawdown = value;
                    backtestResults.maxDrawdownPercent = percent;
                    break;
                }
            }
        });

        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:', backtestResults);
        return backtestResults;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        return null;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateInfoWindow, –¥–æ–±–∞–≤–ª—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
const originalUpdateInfoWindow = updateInfoWindow;
updateInfoWindow = function(window = infoWindow) {
    // –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    originalUpdateInfoWindow(window);
    
    // –ï—Å–ª–∏ –æ–∫–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    if (window) {
        const content = window.querySelector('.content');
        if (content) {
            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            parseBacktestResults();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (backtestResults.netProfit) {
                const backtestDiv = document.createElement('div');
                backtestDiv.style.fontSize = '11px';
                backtestDiv.style.opacity = '0.8';
                backtestDiv.style.marginTop = '8px';
                backtestDiv.style.borderTop = '1px solid #363c4e';
                backtestDiv.style.paddingTop = '8px';
                
                const isPositive = !backtestResults.netProfit.includes('-');
                const profitColor = isPositive ? '#089981' : '#f23645';
                
                backtestDiv.innerHTML = `
                    <div style="margin-bottom: 4px; font-weight: bold;">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:</div>
                    <div style="color: ${profitColor}">–ü—Ä–∏–±—ã–ª—å: ${backtestResults.netProfit} (${backtestResults.netProfitPercent})</div>
                    <div>–°–¥–µ–ª–æ–∫: ${backtestResults.totalTrades}</div>
                    <div>–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${backtestResults.percentProfitable}</div>
                    <div>–ü/–§: ${backtestResults.profitFactor}</div>
                    <div style="color: #f23645">–ü—Ä–æ—Å–∞–¥–∫–∞: ${backtestResults.maxDrawdown} (${backtestResults.maxDrawdownPercent})</div>
                `;
                
                content.appendChild(backtestDiv);
            }
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function checkDefaultSettingsButton() {
    console.log('Checking default settings button');
    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);
    console.log('Default button found:', defaultButton);
    
    if (defaultButton) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        strategySettingsSelector = DEFAULT_SETTINGS_BUTTON_SELECTOR;
        strategyButtonIndex = 0; // –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞
        isStrategySettingsDetected = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        chrome.storage.local.set({
            strategySettingsDetected: true,
            strategySettingsSelector: strategySettingsSelector,
            strategyButtonIndex: strategyButtonIndex
        }, () => {
            console.log('Default settings button saved');
            updateInfoWindow();
        });
        
        return true;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function openStrategySettings() {
    console.log('Trying to open strategy settings');
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);
    console.log('Default settings button:', defaultButton);
    
    if (defaultButton) {
        console.log('Using default settings button');
        simulateClick(defaultButton);
        return true;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    if (strategySettingsSelector && strategySettingsSelector !== DEFAULT_SETTINGS_BUTTON_SELECTOR) {
        console.log('Trying to find settings button with selector:', strategySettingsSelector, 'index:', strategyButtonIndex);
        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));
        console.log('Found buttons:', allButtons.length);
        
        if (allButtons.length > strategyButtonIndex) {
            const settingsButton = allButtons[strategyButtonIndex];
            console.log('Using saved button:', settingsButton);
            simulateClick(settingsButton);
            return true;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    showNotification('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–∫–ª—é—á–∞—é —Ä–µ–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üîç');
    toggleTrackingMode(true);
    return false;
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function resetSettings() {
    console.log('Resetting settings');
    isStrategySettingsDetected = false;
    strategySettingsSelector = '';
    strategyButtonIndex = -1;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chrome.storage.local.set({
        strategySettingsDetected: false,
        strategySettingsSelector: '',
        strategyButtonIndex: -1
    }, () => {
        console.log('Settings reset');
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã ‚ú®');
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        if (infoWindow) {
            document.body.removeChild(infoWindow);
        }
        createInfoWindow();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–∫–∞
function simulateClick(element) {
    console.log('Simulating click on element:', element);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
    try {
        // 1. –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ click
        const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        element.dispatchEvent(clickEvent);
        
        // 2. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º mousedown/mouseup
        const mouseDownEvent = new MouseEvent('mousedown', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        const mouseUpEvent = new MouseEvent('mouseup', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        element.dispatchEvent(mouseDownEvent);
        element.dispatchEvent(mouseUpEvent);
        
        // 3. –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫
        element.click();
        
    } catch (error) {
        console.error('Error simulating click:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
function makeWindowDraggable(window) {
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;
    
    function dragStart(e) {
        if (e.type === "touchstart") {
            initialX = e.touches[0].clientX - xOffset;
            initialY = e.touches[0].clientY - yOffset;
        } else {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;
        }
        
        if (e.target === window) {
            isDragging = true;
        }
    }
    
    function dragEnd() {
        if (!isDragging) return;
        
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        chrome.storage.local.set({
            windowPosition: {
                top: window.style.top,
                right: window.style.right
            }
        });
    }
    
    function drag(e) {
        if (!isDragging) return;
        
        e.preventDefault();
        
        if (e.type === "touchmove") {
            currentX = e.touches[0].clientX - initialX;
            currentY = e.touches[0].clientY - initialY;
        } else {
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;
        }
        
        xOffset = currentX;
        yOffset = currentY;
        window.style.transform = `translate(${currentX}px, ${currentY}px)`;
    }
    
    window.addEventListener("touchstart", dragStart, false);
    window.addEventListener("touchend", dragEnd, false);
    window.addEventListener("touchmove", drag, false);
    window.addEventListener("mousedown", dragStart, false);
    window.addEventListener("mouseup", dragEnd, false);
    window.addEventListener("mousemove", drag, false);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
function toggleTrackingMode(enable) {
    console.log('toggleTrackingMode:', enable);
    isTrackingMode = enable;
    
    if (enable) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤—Å–µ —ç—Ç–∞–ø—ã –∫–ª–∏–∫–∞
        document.addEventListener('mousedown', detectStrategySettings, true);
        document.addEventListener('mouseup', detectStrategySettings, true);
        document.addEventListener('click', detectStrategySettings, true);
        showNotification('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ üéØ');
    } else {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.removeEventListener('mousedown', detectStrategySettings, true);
        document.removeEventListener('mouseup', detectStrategySettings, true);
        document.removeEventListener('click', detectStrategySettings, true);
        showNotification('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚è∏Ô∏è');
    }
    
    updateInfoWindow();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function detectStrategySettings(event) {
    console.log('detectStrategySettings called, tracking mode:', isTrackingMode);
    
    if (!isTrackingMode) return;
    
    const target = event.target;
    console.log('Click target:', target);
    console.log('Target attributes:', {
        class: target.className,
        dataName: target.getAttribute('data-name'),
        role: target.getAttribute('role'),
        ariaLabel: target.getAttribute('aria-label'),
        innerHTML: target.innerHTML
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    const settingsButton = target.closest('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j, [data-name="legend-settings-action"]');
    console.log('Found settings button:', settingsButton);
    
    if (settingsButton) {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
        event.returnValue = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        if (settingsButton.matches('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j')) {
            strategySettingsSelector = 'button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j';
        } else {
            strategySettingsSelector = '[data-name="legend-settings-action"]';
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));
        const buttonIndex = allButtons.indexOf(settingsButton);
        console.log('Button index:', buttonIndex, 'of', allButtons.length, 'buttons');
        strategyButtonIndex = buttonIndex;
        
        console.log('Using selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        isTrackingMode = false;
        document.removeEventListener('mousedown', detectStrategySettings, true);
        document.removeEventListener('mouseup', detectStrategySettings, true);
        document.removeEventListener('click', detectStrategySettings, true);
        
        // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('Setting isStrategySettingsDetected to true');
        isStrategySettingsDetected = true;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        console.log('Recreating info window...');
        if (infoWindow) {
            document.body.removeChild(infoWindow);
        }
        createInfoWindow();
        
        // –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        chrome.storage.local.set({
            strategySettingsDetected: true,
            strategySettingsSelector: strategySettingsSelector,
            strategyButtonIndex: strategyButtonIndex
        }, () => {
            console.log('Settings saved to storage');
            showNotification('–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! ‚úÖ');
        });
        
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: #131722;
        color: #d1d4dc;
        padding: 10px 20px;
        border-radius: 4px;
        z-index: 9999;
        border: 1px solid #363c4e;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
function showInfoWindow() {
    if (!infoWindow) {
        infoWindow = createInfoWindow();
    }
}

function hideInfoWindow() {
    if (infoWindow) {
        if (updateInterval) {
            clearInterval(updateInterval);
            updateInterval = null;
        }
        infoWindow.remove();
        infoWindow = null;
    }
}

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.type === 'GET_TRADING_INFO') {
        sendResponse(getTradingInfo());
    } else if (request.type === 'TOGGLE_INFO_WINDOW') {
        if (request.show) {
            showInfoWindow();
        } else {
            hideInfoWindow();
        }
    }
    return true;
});

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, checking settings button');
    
    // –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
    setTimeout(() => {
        if (!isStrategySettingsDetected) {
            checkDefaultSettingsButton();
        }
    }, 2000);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
setInterval(() => {
    if (!isStrategySettingsDetected) {
        checkDefaultSettingsButton();
    }
}, 5000);

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
chrome.storage.local.get(['strategySettingsDetected', 'strategySettingsSelector', 'strategyButtonIndex'], (result) => {
    console.log('Loaded storage:', result);
    if (result.strategySettingsDetected) {
        isStrategySettingsDetected = true;
        strategySettingsSelector = result.strategySettingsSelector;
        strategyButtonIndex = result.strategyButtonIndex;
        console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
    }
});

// –°–æ–∑–¥–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –±—ç–∫—Ç–µ—Å—Ç–∞
const backtestObserver = new MutationObserver(() => {
    if (infoWindow) {
        updateInfoWindow();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
function observeBacktestResults() {
    const resultsContainer = document.querySelector('.backtesting-content');
    if (resultsContainer) {
        backtestObserver.observe(resultsContainer, {
            childList: true,
            subtree: true,
            characterData: true
        });
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(observeBacktestResults, 2000);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
setInterval(() => {
    observeBacktestResults();
}, 5000);
