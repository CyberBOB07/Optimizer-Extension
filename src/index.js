// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
function createInfoWindow() {
    const window = document.createElement('div');
    window.className = 'tv-optimizer-window';
    window.style.cssText = `
        position: fixed;
        top: 50px;
        right: 50px;
        background: #131722;
        color: #d1d4dc;
        border: 1px solid #363c4e;
        border-radius: 3px;
        padding: 8px;
        z-index: 999;
        min-width: 200px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        font-size: 12px;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        user-select: none;
    `;
    
    document.body.appendChild(window);
    infoWindow = window;
    updateInfoWindow(window);
    makeWindowDraggable(window);
    
    return window;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ–∫–Ω–∞
function updateInfoWindow(window = infoWindow) {
    if (!window) {
        console.log('No window to update');
        return;
    }
    
    const info = getTradingInfo();

    window.innerHTML = `
        <div class="content">
            <div style="margin-bottom: 4px; color: #d1d4dc;">TradingView Optimizer</div>
            <div style="font-size: 11px; opacity: 0.8; color: #787b86;">
                <div>Symbol: ${info.symbol}</div>
                <div>Interval: ${info.interval}</div>
                <div>Settings: ${isStrategySettingsDetected ? '‚úÖ' : '‚ùå'}</div>
                <div>Tracking: ${isTrackingMode ? 'üîç' : '‚è∏Ô∏è'}</div>
            </div>
            ${!isStrategySettingsDetected ? `
                <button class="tv-optimizer-button" id="trackButton" style="
                    background: #2962ff;
                    color: #fff;
                    border: none;
                    border-radius: 4px;
                    padding: 6px 12px;
                    margin-top: 8px;
                    cursor: pointer;
                    font-size: 12px;
                ">
                    ${isTrackingMode ? 'Cancel Tracking' : 'Detect Settings Button'}
                </button>
            ` : `
                <div style="display: flex; gap: 4px; align-items: center; margin-top: 8px;">
                    <button class="tv-optimizer-button" id="openSettingsButton" style="
                        background: #2962ff;
                        color: #fff;
                        border: none;
                        border-radius: 4px;
                        padding: 6px 12px;
                        cursor: pointer;
                        font-size: 12px;
                    ">
                        Open Strategy Settings
                    </button>
                    <button class="tv-optimizer-button" id="resetButton" style="
                        padding: 4px 8px;
                        min-width: auto;
                        background: #364250;
                        color: #d1d4dc;
                        border: 1px solid #4c525e;
                        border-radius: 4px;
                        cursor: pointer;
                        font-size: 12px;
                    " title="Detect button again">
                        üîÑ
                    </button>
                </div>
            `}
            ${backtestResults.netProfit !== null ? `
                <div class="backtest-results" style="
                    margin-top: 8px;
                    padding-top: 8px;
                    border-top: 1px solid #363c4e;
                ">
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Net Profit:</span>
                        <span class="value ${getValueClass(backtestResults.netProfit)}" style="
                            color: ${getValueClass(backtestResults.netProfit) === 'positive' ? '#089981' : 
                                   getValueClass(backtestResults.netProfit) === 'negative' ? '#f23645' : '#d1d4dc'}
                        ">
                            ${formatUSDT(backtestResults.netProfit)}
                            ${backtestResults.netProfitPercent ? `(${formatPercent(backtestResults.netProfitPercent)})` : ''}
                        </span>
                    </div>
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Total Closed Trades:</span>
                        <span class="value" style="color: #d1d4dc;">${backtestResults.totalTrades || '‚Äî'}</span>
                    </div>
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Percent Profitable:</span>
                        <span class="value" style="color: #d1d4dc;">${formatPercent(backtestResults.percentProfitable)}</span>
                    </div>
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Profit Factor:</span>
                        <span class="value ${getValueClass(backtestResults.profitFactor - 1)}" style="
                            color: ${getValueClass(backtestResults.profitFactor - 1) === 'positive' ? '#089981' : 
                                   getValueClass(backtestResults.profitFactor - 1) === 'negative' ? '#f23645' : '#d1d4dc'}
                        ">${formatNumber(backtestResults.profitFactor)}</span>
                    </div>
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Max Drawdown:</span>
                        <span class="value ${getValueClass(-backtestResults.maxDrawdown)}" style="
                            color: ${getValueClass(-backtestResults.maxDrawdown) === 'positive' ? '#089981' : 
                                   getValueClass(-backtestResults.maxDrawdown) === 'negative' ? '#f23645' : '#d1d4dc'}
                        ">
                            ${formatUSDT(backtestResults.maxDrawdown)}
                            ${backtestResults.maxDrawdownPercent ? `(${formatPercent(backtestResults.maxDrawdownPercent)})` : ''}
                        </span>
                    </div>
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Avg Trade:</span>
                        <span class="value ${getValueClass(backtestResults.avgTrade)}" style="
                            color: ${getValueClass(backtestResults.avgTrade) === 'positive' ? '#089981' : 
                                   getValueClass(backtestResults.avgTrade) === 'negative' ? '#f23645' : '#d1d4dc'}
                        ">
                            ${formatUSDT(backtestResults.avgTrade)}
                            ${backtestResults.avgTradePercent ? `(${formatPercent(backtestResults.avgTradePercent)})` : ''}
                        </span>
                    </div>
                    <div class="result-item" style="margin: 4px 0;">
                        <span class="label" style="color: #787b86;">Avg # Bars in Trades:</span>
                        <span class="value" style="color: #d1d4dc;">${formatNumber(backtestResults.avgBarsInTrade, 0)}</span>
                    </div>
                </div>
            ` : ''}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    if (!isStrategySettingsDetected) {
        const trackButton = window.querySelector('#trackButton');
        if (trackButton) {
            trackButton.addEventListener('click', () => {
                toggleTrackingMode(!isTrackingMode);
            });
        }
    } else {
        const openSettingsButton = window.querySelector('#openSettingsButton');
        if (openSettingsButton) {
            openSettingsButton.addEventListener('click', openStrategySettings);
        }
        
        const resetButton = window.querySelector('#resetButton');
        if (resetButton) {
            resetButton.addEventListener('click', resetSettings);
        }
    }

    // –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º
    makeWindowDraggable(window);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
function getTradingInfo() {
    try {
        // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞: –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º —Å–∏–º–≤–æ–ª–æ–º –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ç—É–ª–±–∞—Ä–µ
        const symbolElement = document.querySelector('[data-name="legend-series-item"] [data-name="legend-source-title"]');
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        const intervalElement = document.querySelector('button.title-l31H9iuA.accessible-l31H9iuA[aria-label="Change interval"]');
        
        return {
            symbol: symbolElement ? symbolElement.textContent.trim() : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            interval: intervalElement ? intervalElement.textContent.trim() : '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return {
            symbol: '–û—à–∏–±–∫–∞',
            interval: '–û—à–∏–±–∫–∞'
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let infoWindow = null;
let isTrackingMode = false;
let isStrategySettingsDetected = false;
let strategySettingsSelector = '';
let strategyButtonIndex = -1;
const DEFAULT_SETTINGS_BUTTON_SELECTOR = 'button[title="Settings"].apply-common-tooltip';

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
let backtestResults = {
    netProfit: null,
    netProfitPercent: null,
    totalTrades: null,
    percentProfitable: null,
    profitFactor: null,
    maxDrawdown: null,
    maxDrawdownPercent: null,
    avgTrade: null,
    avgTradePercent: null,
    avgBarsInTrade: null
};

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
function parseBacktestResults() {
    console.log('Parsing backtest results');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∫–Ω–∞
    if (!infoWindow) {
        console.log('Creating missing info window');
        createInfoWindow();
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const reportContainer = document.querySelector('.reportContainer-xOy3zRsH');
    if (!reportContainer) {
        console.log('Report container not found');
        return null;
    }

    const container = reportContainer.querySelector('.container-Yvm0jjs7');
    if (!container) {
        console.log('Results container not found in report container');
        return null;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
    const getValuesByTitle = (title) => {
        const cell = Array.from(container.querySelectorAll('.containerCell-Yvm0jjs7'))
            .find(cell => cell.querySelector('.title-Yvm0jjs7')?.textContent === title);
            
        if (!cell) {
            console.log(`Cell with title "${title}" not found`);
            return { main: null, additional: null };
        }

        const secondRow = cell.querySelector('.secondRow-Yvm0jjs7');
        if (!secondRow) {
            console.log(`Second row not found for "${title}"`);
            return { main: null, additional: null };
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–π div)
        const mainDiv = secondRow.querySelector('div:first-child');
        const mainValue = mainDiv?.textContent?.trim();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤—Ç–æ—Ä–æ–π div —Å –∫–ª–∞—Å—Å–æ–º additionalPercent)
        const additionalDiv = secondRow.querySelector('.additionalPercent-Yvm0jjs7');
        const additionalValue = additionalDiv?.textContent?.trim();

        console.log(`Found values for ${title}:`, { 
            main: mainValue, 
            mainClass: mainDiv?.className,
            additional: additionalValue,
            additionalClass: additionalDiv?.className
        });
        
        return { main: mainValue, additional: additionalValue };
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const parseValue = (value, removeUSDT = true) => {
        if (!value) return null;
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –º–∏–Ω—É—Å–æ–≤ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        let cleaned = value.replace(/[\u2212\u2013\u2014‚àí]/g, '-');
        
        if (removeUSDT) {
            cleaned = cleaned.replace(' USDT', '');
        }
        
        cleaned = cleaned.replace('%', '').replace(/,/g, '');
        const parsed = parseFloat(cleaned);
        
        console.log('Parsing value:', { 
            original: value, 
            afterMinusReplacement: cleaned,
            parsed: parsed,
            isNaN: isNaN(parsed)
        });
        
        return isNaN(parsed) ? null : parsed;
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const netProfit = getValuesByTitle('Net Profit');
    const totalTrades = getValuesByTitle('Total Closed Trades');
    const percentProfitable = getValuesByTitle('Percent Profitable');
    const profitFactor = getValuesByTitle('Profit Factor');
    const maxDrawdown = getValuesByTitle('Max Drawdown');
    const avgTrade = getValuesByTitle('Avg Trade');
    const avgBarsInTrade = getValuesByTitle('Avg # Bars in Trades');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞
    const results = {
        netProfit: parseValue(netProfit.main),
        netProfitPercent: parseValue(netProfit.additional),
        totalTrades: parseInt(totalTrades.main) || null,
        percentProfitable: parseValue(percentProfitable.main),
        profitFactor: parseValue(profitFactor.main),
        maxDrawdown: parseValue(maxDrawdown.main),
        maxDrawdownPercent: parseValue(maxDrawdown.additional),
        avgTrade: parseValue(avgTrade.main),
        avgTradePercent: parseValue(avgTrade.additional),
        avgBarsInTrade: parseInt(avgBarsInTrade.main) || null
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ null
    const hasValidResults = Object.values(results).some(value => value !== null);
    
    if (hasValidResults) {
        console.log('Valid results found:', results);
        backtestResults = results;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (infoWindow) {
            console.log('Updating existing info window');
            updateInfoWindow(infoWindow);
        } else {
            console.log('Info window lost, creating new one');
            createInfoWindow();
        }
    } else {
        console.log('No valid results found');
    }

    return hasValidResults ? results : null;
}

function formatNumber(num, decimals = 2) {
    if (num === null || num === undefined || isNaN(num)) return '‚Äî';
    return num.toFixed(decimals);
}

function formatPercent(num) {
    if (num === null || num === undefined || isNaN(num)) return '‚Äî';
    return `${num.toFixed(2)}%`;
}

function formatUSDT(num) {
    if (num === null || num === undefined || isNaN(num)) return '‚Äî';
    return `${num.toFixed(2)} USDT`;
}

function getValueClass(num) {
    if (num === null || num === undefined || isNaN(num)) return '';
    return num > 0 ? 'positive' : num < 0 ? 'negative' : '';
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function checkDefaultSettingsButton() {
    console.log('Checking default settings button');
    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);
    console.log('Default button found:', defaultButton);
    
    if (defaultButton) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        strategySettingsSelector = DEFAULT_SETTINGS_BUTTON_SELECTOR;
        strategyButtonIndex = 0; // –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞
        isStrategySettingsDetected = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        chrome.storage.local.set({
            strategySettingsDetected: true,
            strategySettingsSelector: strategySettingsSelector,
            strategyButtonIndex: strategyButtonIndex
        }, () => {
            console.log('Default settings button saved');
            updateInfoWindow();
        });
        
        return true;
    }
    
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
function openStrategySettings() {
    console.log('Trying to open strategy settings');
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);
    console.log('Default settings button:', defaultButton);
    
    if (defaultButton) {
        console.log('Using default settings button');
        simulateClick(defaultButton);
        return true;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    if (strategySettingsSelector && strategySettingsSelector !== DEFAULT_SETTINGS_BUTTON_SELECTOR) {
        console.log('Trying to find settings button with selector:', strategySettingsSelector, 'index:', strategyButtonIndex);
        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));
        console.log('Found buttons:', allButtons.length);
        
        if (allButtons.length > strategyButtonIndex) {
            const settingsButton = allButtons[strategyButtonIndex];
            console.log('Using saved button:', settingsButton);
            simulateClick(settingsButton);
            return true;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    showNotification('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–∫–ª—é—á–∞—é —Ä–µ–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üîç');
    toggleTrackingMode(true);
    return false;
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function resetSettings() {
    console.log('Resetting settings');
    isStrategySettingsDetected = false;
    strategySettingsSelector = '';
    strategyButtonIndex = -1;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chrome.storage.local.set({
        strategySettingsDetected: false,
        strategySettingsSelector: '',
        strategyButtonIndex: -1
    }, () => {
        console.log('Settings reset');
        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã ‚ú®');
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        if (infoWindow) {
            document.body.removeChild(infoWindow);
        }
        createInfoWindow();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∫–ª–∏–∫–∞
function simulateClick(element) {
    console.log('Simulating click on element:', element);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
    try {
        // 1. –°–æ–∑–¥–∞–µ–º –∏ –¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ click
        const clickEvent = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        element.dispatchEvent(clickEvent);
        
        // 2. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º mousedown/mouseup
        const mouseDownEvent = new MouseEvent('mousedown', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        const mouseUpEvent = new MouseEvent('mouseup', {
            bubbles: true,
            cancelable: true,
            view: window
        });
        element.dispatchEvent(mouseDownEvent);
        element.dispatchEvent(mouseUpEvent);
        
        // 3. –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫
        element.click();
        
    } catch (error) {
        console.error('Error simulating click:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
function makeWindowDraggable(window) {
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;
    
    function dragStart(e) {
        if (e.type === "touchstart") {
            initialX = e.touches[0].clientX - xOffset;
            initialY = e.touches[0].clientY - yOffset;
        } else {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;
        }
        
        if (e.target === window) {
            isDragging = true;
        }
    }
    
    function dragEnd() {
        if (!isDragging) return;
        
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        chrome.storage.local.set({
            windowPosition: {
                top: window.style.top,
                right: window.style.right
            }
        });
    }
    
    function drag(e) {
        if (!isDragging) return;
        
        e.preventDefault();
        
        if (e.type === "touchmove") {
            currentX = e.touches[0].clientX - initialX;
            currentY = e.touches[0].clientY - initialY;
        } else {
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;
        }
        
        xOffset = currentX;
        yOffset = currentY;
        window.style.transform = `translate(${currentX}px, ${currentY}px)`;
    }
    
    window.addEventListener("touchstart", dragStart, false);
    window.addEventListener("touchend", dragEnd, false);
    window.addEventListener("touchmove", drag, false);
    window.addEventListener("mousedown", dragStart, false);
    window.addEventListener("mouseup", dragEnd, false);
    window.addEventListener("mousemove", drag, false);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
function toggleTrackingMode(enable) {
    console.log('toggleTrackingMode:', enable);
    isTrackingMode = enable;
    
    if (enable) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤—Å–µ —ç—Ç–∞–ø—ã –∫–ª–∏–∫–∞
        document.addEventListener('mousedown', detectStrategySettings, true);
        document.addEventListener('mouseup', detectStrategySettings, true);
        document.addEventListener('click', detectStrategySettings, true);
        showNotification('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ üéØ');
    } else {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.removeEventListener('mousedown', detectStrategySettings, true);
        document.removeEventListener('mouseup', detectStrategySettings, true);
        document.removeEventListener('click', detectStrategySettings, true);
        showNotification('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚è∏Ô∏è');
    }
    
    updateInfoWindow();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function detectStrategySettings(event) {
    console.log('detectStrategySettings called, tracking mode:', isTrackingMode);
    
    if (!isTrackingMode) return;
    
    const target = event.target;
    console.log('Click target:', target);
    console.log('Target attributes:', {
        class: target.className,
        dataName: target.getAttribute('data-name'),
        role: target.getAttribute('role'),
        ariaLabel: target.getAttribute('aria-label'),
        innerHTML: target.innerHTML
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    const settingsButton = target.closest('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j, [data-name="legend-settings-action"]');
    console.log('Found settings button:', settingsButton);
    
    if (settingsButton) {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç–∞–ø–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
        event.returnValue = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        if (settingsButton.matches('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j')) {
            strategySettingsSelector = 'button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j';
        } else {
            strategySettingsSelector = '[data-name="legend-settings-action"]';
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));
        const buttonIndex = allButtons.indexOf(settingsButton);
        console.log('Button index:', buttonIndex, 'of', allButtons.length, 'buttons');
        strategyButtonIndex = buttonIndex;
        
        console.log('Using selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        isTrackingMode = false;
        document.removeEventListener('mousedown', detectStrategySettings, true);
        document.removeEventListener('mouseup', detectStrategySettings, true);
        document.removeEventListener('click', detectStrategySettings, true);
        
        // –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('Setting isStrategySettingsDetected to true');
        isStrategySettingsDetected = true;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        console.log('Recreating info window...');
        if (infoWindow) {
            document.body.removeChild(infoWindow);
        }
        createInfoWindow();
        
        // –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ storage
        chrome.storage.local.set({
            strategySettingsDetected: true,
            strategySettingsSelector: strategySettingsSelector,
            strategyButtonIndex: strategyButtonIndex
        }, () => {
            console.log('Settings saved to storage');
            showNotification('–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! ‚úÖ');
        });
        
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: #131722;
        color: #d1d4dc;
        padding: 10px 20px;
        border-radius: 4px;
        z-index: 9999;
        border: 1px solid #363c4e;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
function showInfoWindow() {
    if (!infoWindow) {
        infoWindow = createInfoWindow();
    }
}

function hideInfoWindow() {
    if (infoWindow) {
        if (updateInterval) {
            clearInterval(updateInterval);
            updateInterval = null;
        }
        infoWindow.remove();
        infoWindow = null;
    }
}

// –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.type === 'GET_TRADING_INFO') {
        sendResponse(getTradingInfo());
    } else if (request.type === 'TOGGLE_INFO_WINDOW') {
        if (request.show) {
            showInfoWindow();
        } else {
            hideInfoWindow();
        }
    }
    return true;
});

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, checking settings button');
    
    // –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
    setTimeout(() => {
        if (!isStrategySettingsDetected) {
            checkDefaultSettingsButton();
        }
    }, 2000);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏
setInterval(() => {
    if (!isStrategySettingsDetected) {
        checkDefaultSettingsButton();
    }
}, 5000);

// –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
chrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector'], (result) => {
    console.log('Loaded storage:', result);
    
    if (result.strategySettingsDetected) {
        isStrategySettingsDetected = true;
        strategySettingsSelector = result.strategySettingsSelector;
        strategyButtonIndex = result.strategyButtonIndex;
        console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ
    createInfoWindow();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
    observeBacktestResults();
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function init() {
    console.log('Initializing TradingView Optimizer...');
    
    chrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector'], (result) => {
        console.log('Loaded storage:', result);
        
        if (result.strategySettingsDetected) {
            isStrategySettingsDetected = true;
            strategySettingsSelector = result.strategySettingsSelector;
            strategyButtonIndex = result.strategyButtonIndex;
            console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);
        }
        
        createInfoWindow();
        observeBacktestResults();
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
init();

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, starting observers');
    setTimeout(observeBacktestResults, 2000);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
function observeBacktestResults() {
    console.log('Starting backtest results observer');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const findResultsContainer = () => {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º reportContainer
        const reportContainer = document.querySelector('.reportContainer-xOy3zRsH');
        if (reportContainer) {
            console.log('Found report container');
            return reportContainer;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ reportContainer, –∏—â–µ–º –≤ bottom-area
        const bottomArea = document.querySelector('#bottom-area');
        if (!bottomArea) {
            console.log('Bottom area not found');
            return null;
        }

        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const container = bottomArea.querySelector('.container-Yvm0jjs7');
        if (!container) {
            console.log('Results container not found');
            return null;
        }

        console.log('Found results container in bottom area');
        return container;
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleBacktestUpdate = (mutations) => {
        console.log('Processing backtest update, mutations:', mutations.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        let hasRelevantChanges = false;
        for (const mutation of mutations) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤
            if (mutation.type === 'childList') {
                hasRelevantChanges = true;
                console.log('Detected DOM structure change');
                break;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if (mutation.type === 'characterData') {
                const parent = mutation.target.parentElement;
                if (parent && (
                    parent.classList.contains('secondRow-Yvm0jjs7') ||
                    parent.classList.contains('positiveValue-Yvm0jjs7') ||
                    parent.classList.contains('negativeValue-Yvm0jjs7')
                )) {
                    hasRelevantChanges = true;
                    console.log('Detected value change in:', parent);
                    break;
                }
            }
        }

        if (hasRelevantChanges) {
            console.log('Parsing updated results');
            const results = parseBacktestResults();
            if (results) {
                console.log('New results parsed:', results);
                updateInfoWindow();
            }
        }
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    const observer = new MutationObserver((mutations) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounce, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
        clearTimeout(observer.timeout);
        observer.timeout = setTimeout(() => {
            handleBacktestUpdate(mutations);
        }, 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ 100–º—Å
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    const startObserving = () => {
        const container = findResultsContainer();
        if (container) {
            console.log('Starting observation of container');
            observer.observe(container, {
                childList: true,
                subtree: true,
                characterData: true,
                attributes: false
            });
            // –°—Ä–∞–∑—É –ø–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            handleBacktestUpdate([{ type: 'childList' }]);
        } else {
            console.log('Container not found, retrying in 1 second');
            setTimeout(startObserving, 1000);
        }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    startObserving();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
    return () => {
        console.log('Stopping backtest results observer');
        clearTimeout(observer.timeout);
        observer.disconnect();
    };
}
