{"version":3,"file":"content.js","mappings":"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","sources":["webpack://tradingview-optimizer/./src/index.js"],"sourcesContent":["// Глобальные переменные для отслеживания состояния\r\nlet isUpdating = false;\r\nlet updateQueue = false;\r\n\r\n// Функция создания информационного окна\r\nfunction createInfoWindow() {\r\n    if (infoWindow) {\r\n        console.log('Window already exists, skipping creation');\r\n        return infoWindow;\r\n    }\r\n\r\n    console.log('Creating new info window');\r\n    const window = document.createElement('div');\r\n    window.className = 'tv-optimizer-window';\r\n    window.style.cssText = `\r\n        position: fixed;\r\n        top: 50px;\r\n        right: 50px;\r\n        background: #131722;\r\n        color: #d1d4dc;\r\n        border: 1px solid #363c4e;\r\n        border-radius: 3px;\r\n        padding: 8px;\r\n        z-index: 999;\r\n        min-width: 200px;\r\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        font-size: 12px;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\r\n        user-select: none;\r\n    `;\r\n    \r\n    document.body.appendChild(window);\r\n    infoWindow = window;\r\n    makeWindowDraggable(window);\r\n    \r\n    // Обновляем содержимое окна после его создания\r\n    setTimeout(() => updateInfoWindow(window), 0);\r\n    \r\n    return window;\r\n}\r\n\r\n// Функция обновления содержимого окна\r\nfunction updateInfoWindow(window = infoWindow) {\r\n    if (!window) {\r\n        console.log('No window to update');\r\n        return;\r\n    }\r\n\r\n    // Защита от рекурсии\r\n    if (isUpdating) {\r\n        console.log('Already updating, queuing next update');\r\n        updateQueue = true;\r\n        return;\r\n    }\r\n\r\n    try {\r\n        isUpdating = true;\r\n        console.log('Updating info window');\r\n        \r\n        const info = getTradingInfo();\r\n        const results = parseBacktestResults();\r\n\r\n        // Создаем новый div для контента\r\n        const content = document.createElement('div');\r\n        content.className = 'content';\r\n        content.innerHTML = `\r\n            <div style=\"margin-bottom: 4px; color: #d1d4dc;\">TradingView Optimizer</div>\r\n            <div style=\"font-size: 11px; opacity: 0.8; color: #787b86;\">\r\n                <div>Symbol: ${info.symbol}</div>\r\n                <div>Interval: ${info.interval}</div>\r\n                <div>Settings: ${isStrategySettingsDetected ? '✅' : '❌'}</div>\r\n                <div>Tracking: ${isTrackingMode ? '🔍' : '⏸️'}</div>\r\n            </div>\r\n            ${!isStrategySettingsDetected ? `\r\n                <button class=\"tv-optimizer-button\" id=\"detectButton\" style=\"\r\n                    background: #2962ff;\r\n                    color: #fff;\r\n                    border: none;\r\n                    border-radius: 2px;\r\n                    padding: 4px 8px;\r\n                    margin-top: 8px;\r\n                    cursor: pointer;\r\n                    font-size: 11px;\r\n                    width: 100%;\r\n                \">Detect Settings Button</button>\r\n            ` : `\r\n                <button class=\"tv-optimizer-button\" id=\"openButton\" style=\"\r\n                    background: #2962ff;\r\n                    color: #fff;\r\n                    border: none;\r\n                    border-radius: 2px;\r\n                    padding: 4px 8px;\r\n                    margin-top: 8px;\r\n                    cursor: pointer;\r\n                    font-size: 11px;\r\n                    width: 100%;\r\n                \">Open Strategy Settings</button>\r\n            `}\r\n            ${results ? `\r\n                <div style=\"margin-top: 8px; border-top: 1px solid #363c4e; padding-top: 8px;\">\r\n                    <div style=\"margin-bottom: 4px;\">Backtest Results:</div>\r\n                    <div style=\"font-size: 11px;\">\r\n                        <div>Net Profit: <span class=\"${getValueClass(results.netProfit)}\">${formatUSDT(results.netProfit)} (${formatPercent(results.netProfitPercent)})</span></div>\r\n                        <div>Total Trades: ${results.totalTrades}</div>\r\n                        <div>Percent Profitable: ${formatPercent(results.percentProfitable)}</div>\r\n                        <div>Profit Factor: ${formatNumber(results.profitFactor)}</div>\r\n                        <div>Max Drawdown: ${formatUSDT(results.maxDrawdown)} (${formatPercent(results.maxDrawdownPercent)})</div>\r\n                        <div>Avg Trade: ${formatUSDT(results.avgTrade)} (${formatPercent(results.avgTradePercent)})</div>\r\n                        <div>Avg # Bars: ${results.avgBarsInTrade}</div>\r\n                    </div>\r\n                </div>\r\n            ` : ''}\r\n        `;\r\n\r\n        // Очищаем окно и добавляем новый контент\r\n        window.innerHTML = '';\r\n        window.appendChild(content);\r\n\r\n        // Добавляем обработчики для кнопок\r\n        if (!isStrategySettingsDetected) {\r\n            const detectButton = window.querySelector('#detectButton');\r\n            if (detectButton) {\r\n                detectButton.addEventListener('click', detectStrategySettings);\r\n            }\r\n        } else {\r\n            const openButton = window.querySelector('#openButton');\r\n            if (openButton) {\r\n                openButton.addEventListener('click', openStrategySettings);\r\n            }\r\n        }\r\n    } finally {\r\n        isUpdating = false;\r\n        if (updateQueue) {\r\n            updateQueue = false;\r\n            updateInfoWindow();\r\n        }\r\n    }\r\n}\r\n\r\n// Функция получения информации о торговле\r\nfunction getTradingInfo() {\r\n    try {\r\n        // Селектор для символа: кнопка с текущим символом в верхнем тулбаре\r\n        const symbolElement = document.querySelector('[data-name=\"legend-series-item\"] [data-name=\"legend-source-title\"]');\r\n        \r\n        // Селектор для интервала: кнопка с текущим интервалом\r\n        const intervalElement = document.querySelector('button.title-l31H9iuA.accessible-l31H9iuA[aria-label=\"Change interval\"]');\r\n        \r\n        return {\r\n            symbol: symbolElement ? symbolElement.textContent.trim() : 'Не определен',\r\n            interval: intervalElement ? intervalElement.textContent.trim() : 'Не определен'\r\n        };\r\n    } catch (error) {\r\n        console.error('Ошибка получения данных:', error);\r\n        return {\r\n            symbol: 'Ошибка',\r\n            interval: 'Ошибка'\r\n        };\r\n    }\r\n}\r\n\r\n// Глобальные переменные\r\nlet infoWindow = null;\r\nlet isTrackingMode = false;\r\nlet isStrategySettingsDetected = false;\r\nlet strategySettingsSelector = '';\r\nlet strategyButtonIndex = -1;\r\nconst DEFAULT_SETTINGS_BUTTON_SELECTOR = 'button[title=\"Settings\"].apply-common-tooltip';\r\n\r\n// Структура для хранения результатов бэктеста\r\nlet backtestResults = {\r\n    netProfit: null,\r\n    netProfitPercent: null,\r\n    totalTrades: null,\r\n    percentProfitable: null,\r\n    profitFactor: null,\r\n    maxDrawdown: null,\r\n    maxDrawdownPercent: null,\r\n    avgTrade: null,\r\n    avgTradePercent: null,\r\n    avgBarsInTrade: null\r\n};\r\n\r\n// Функция парсинга результатов бэктеста\r\nfunction parseBacktestResults() {\r\n    const container = document.querySelector('.container-Yvm0jjs7');\r\n    if (!container) {\r\n        console.log('Container not found');\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        // Находим все ячейки с данными\r\n        const cells = container.querySelectorAll('.containerCell-Yvm0jjs7');\r\n        if (!cells || cells.length === 0) {\r\n            console.log('No cells found');\r\n            return null;\r\n        }\r\n\r\n        const results = {};\r\n        \r\n        cells.forEach(cell => {\r\n            const title = cell.querySelector('.title-Yvm0jjs7')?.textContent;\r\n            const value = cell.querySelector('.secondRow-Yvm0jjs7 div:first-child')?.textContent;\r\n            const additionalPercent = cell.querySelector('.additionalPercent-Yvm0jjs7')?.textContent;\r\n            \r\n            if (title && value) {\r\n                switch (title.trim()) {\r\n                    case 'Net Profit':\r\n                        results.netProfit = parseFloat(value.replace(/[^0-9.-]/g, ''));\r\n                        if (additionalPercent) {\r\n                            results.netProfitPercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));\r\n                        }\r\n                        break;\r\n                    case 'Total Closed Trades':\r\n                        results.totalTrades = parseInt(value);\r\n                        break;\r\n                    case 'Percent Profitable':\r\n                        results.percentProfitable = parseFloat(value.replace('%', ''));\r\n                        break;\r\n                    case 'Profit Factor':\r\n                        results.profitFactor = parseFloat(value);\r\n                        break;\r\n                    case 'Max Drawdown':\r\n                        results.maxDrawdown = parseFloat(value.replace(/[^0-9.-]/g, ''));\r\n                        if (additionalPercent) {\r\n                            results.maxDrawdownPercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));\r\n                        }\r\n                        break;\r\n                    case 'Avg Trade':\r\n                        results.avgTrade = parseFloat(value.replace(/[^0-9.-]/g, ''));\r\n                        if (additionalPercent) {\r\n                            results.avgTradePercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));\r\n                        }\r\n                        break;\r\n                    case 'Avg # Bars in Trades':\r\n                        results.avgBarsInTrade = parseFloat(value);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Проверяем, что у нас есть хотя бы основные результаты\r\n        if (results.netProfit !== undefined && results.totalTrades !== undefined) {\r\n            console.log('Results parsed successfully:', results);\r\n            return results;\r\n        }\r\n\r\n        console.log('Not all required results found');\r\n        return null;\r\n    } catch (error) {\r\n        console.error('Error parsing results:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction formatNumber(num, decimals = 2) {\r\n    if (num === null || num === undefined || isNaN(num)) return '—';\r\n    return num.toFixed(decimals);\r\n}\r\n\r\nfunction formatPercent(num) {\r\n    if (num === null || num === undefined || isNaN(num)) return '—';\r\n    return `${num.toFixed(2)}%`;\r\n}\r\n\r\nfunction formatUSDT(num) {\r\n    if (num === null || num === undefined || isNaN(num)) return '—';\r\n    return `${num.toFixed(2)} USDT`;\r\n}\r\n\r\nfunction getValueClass(num) {\r\n    if (num === null || num === undefined || isNaN(num)) return '';\r\n    return num > 0 ? 'positive' : num < 0 ? 'negative' : '';\r\n}\r\n\r\n// Функция проверки доступности кнопки настроек\r\nfunction checkDefaultSettingsButton() {\r\n    console.log('Checking default settings button');\r\n    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);\r\n    console.log('Default button found:', defaultButton);\r\n    \r\n    if (defaultButton) {\r\n        // Сохраняем эту кнопку как основную\r\n        strategySettingsSelector = DEFAULT_SETTINGS_BUTTON_SELECTOR;\r\n        strategyButtonIndex = 0; // Эта кнопка всегда одна\r\n        isStrategySettingsDetected = true;\r\n        \r\n        // Сохраняем в storage\r\n        chrome.storage.local.set({\r\n            strategySettingsDetected: true,\r\n            strategySettingsSelector: strategySettingsSelector,\r\n            strategyButtonIndex: strategyButtonIndex\r\n        }, () => {\r\n            console.log('Default settings button saved');\r\n            updateInfoWindow();\r\n        });\r\n        \r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\n// Функция для открытия настроек стратегии\r\nfunction openStrategySettings() {\r\n    console.log('Trying to open strategy settings');\r\n    \r\n    // Пробуем найти кнопку по основному селектору\r\n    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);\r\n    console.log('Default settings button:', defaultButton);\r\n    \r\n    if (defaultButton) {\r\n        console.log('Using default settings button');\r\n        simulateClick(defaultButton);\r\n        return true;\r\n    }\r\n    \r\n    // Если не нашли, используем сохраненную кнопку\r\n    if (strategySettingsSelector && strategySettingsSelector !== DEFAULT_SETTINGS_BUTTON_SELECTOR) {\r\n        console.log('Trying to find settings button with selector:', strategySettingsSelector, 'index:', strategyButtonIndex);\r\n        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));\r\n        console.log('Found buttons:', allButtons.length);\r\n        \r\n        if (allButtons.length > strategyButtonIndex) {\r\n            const settingsButton = allButtons[strategyButtonIndex];\r\n            console.log('Using saved button:', settingsButton);\r\n            simulateClick(settingsButton);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // Если не нашли ни одну кнопку, показываем сообщение и включаем отслеживание\r\n    showNotification('Кнопка не найдена. Включаю режим отслеживания ');\r\n    toggleTrackingMode(true);\r\n    return false;\r\n}\r\n\r\n// Функция сброса настроек\r\nfunction resetSettings() {\r\n    console.log('Resetting settings');\r\n    isStrategySettingsDetected = false;\r\n    strategySettingsSelector = '';\r\n    strategyButtonIndex = -1;\r\n    \r\n    // Сохраняем новое состояние\r\n    chrome.storage.local.set({\r\n        strategySettingsDetected: false,\r\n        strategySettingsSelector: '',\r\n        strategyButtonIndex: -1\r\n    }, () => {\r\n        console.log('Settings reset');\r\n        showNotification('Настройки сброшены ');\r\n        // Пересоздаем окно\r\n        if (infoWindow) {\r\n            document.body.removeChild(infoWindow);\r\n        }\r\n        createInfoWindow();\r\n    });\r\n}\r\n\r\n// Функция для симуляции клика\r\nfunction simulateClick(element) {\r\n    console.log('Simulating click on element:', element);\r\n    \r\n    // Пробуем разные способы клика\r\n    try {\r\n        // 1. Создаем и диспатчим событие click\r\n        const clickEvent = new MouseEvent('click', {\r\n            bubbles: true,\r\n            cancelable: true,\r\n            view: window\r\n        });\r\n        element.dispatchEvent(clickEvent);\r\n        \r\n        // 2. Если не сработало, пробуем mousedown/mouseup\r\n        const mouseDownEvent = new MouseEvent('mousedown', {\r\n            bubbles: true,\r\n            cancelable: true,\r\n            view: window\r\n        });\r\n        const mouseUpEvent = new MouseEvent('mouseup', {\r\n            bubbles: true,\r\n            cancelable: true,\r\n            view: window\r\n        });\r\n        element.dispatchEvent(mouseDownEvent);\r\n        element.dispatchEvent(mouseUpEvent);\r\n        \r\n        // 3. Пробуем программный клик\r\n        element.click();\r\n        \r\n    } catch (error) {\r\n        console.error('Error simulating click:', error);\r\n    }\r\n}\r\n\r\n// Функция для перетаскивания окна\r\nfunction makeWindowDraggable(window) {\r\n    let isDragging = false;\r\n    let currentX;\r\n    let currentY;\r\n    let initialX;\r\n    let initialY;\r\n    let xOffset = 0;\r\n    let yOffset = 0;\r\n    \r\n    function dragStart(e) {\r\n        if (e.type === \"touchstart\") {\r\n            initialX = e.touches[0].clientX - xOffset;\r\n            initialY = e.touches[0].clientY - yOffset;\r\n        } else {\r\n            initialX = e.clientX - xOffset;\r\n            initialY = e.clientY - yOffset;\r\n        }\r\n        \r\n        if (e.target === window) {\r\n            isDragging = true;\r\n        }\r\n    }\r\n    \r\n    function dragEnd() {\r\n        if (!isDragging) return;\r\n        \r\n        initialX = currentX;\r\n        initialY = currentY;\r\n        isDragging = false;\r\n        \r\n        // Сохраняем позицию\r\n        chrome.storage.local.set({\r\n            windowPosition: {\r\n                top: window.style.top,\r\n                right: window.style.right\r\n            }\r\n        });\r\n    }\r\n    \r\n    function drag(e) {\r\n        if (!isDragging) return;\r\n        \r\n        e.preventDefault();\r\n        \r\n        if (e.type === \"touchmove\") {\r\n            currentX = e.touches[0].clientX - initialX;\r\n            currentY = e.touches[0].clientY - initialY;\r\n        } else {\r\n            currentX = e.clientX - initialX;\r\n            currentY = e.clientY - initialY;\r\n        }\r\n        \r\n        xOffset = currentX;\r\n        yOffset = currentY;\r\n        window.style.transform = `translate(${currentX}px, ${currentY}px)`;\r\n    }\r\n    \r\n    window.addEventListener(\"touchstart\", dragStart, false);\r\n    window.addEventListener(\"touchend\", dragEnd, false);\r\n    window.addEventListener(\"touchmove\", drag, false);\r\n    window.addEventListener(\"mousedown\", dragStart, false);\r\n    window.addEventListener(\"mouseup\", dragEnd, false);\r\n    window.addEventListener(\"mousemove\", drag, false);\r\n}\r\n\r\n// Функции управления окном\r\nfunction showInfoWindow() {\r\n    console.log('Showing info window');\r\n    if (!infoWindow) {\r\n        const window = createInfoWindow();\r\n        if (window) {\r\n            console.log('Window created successfully');\r\n            // Запускаем ожидание результатов после создания окна\r\n            waitForBacktestResults();\r\n        }\r\n    } else {\r\n        console.log('Window already exists, updating');\r\n        updateInfoWindow();\r\n    }\r\n}\r\n\r\nfunction hideInfoWindow() {\r\n    console.log('Hiding info window');\r\n    if (infoWindow) {\r\n        // Останавливаем все наблюдатели\r\n        cleanupObservers();\r\n        infoWindow.remove();\r\n        infoWindow = null;\r\n    }\r\n}\r\n\r\n// Функция для включения/выключения режима отслеживания\r\nfunction toggleTrackingMode(enable) {\r\n    console.log('toggleTrackingMode:', enable);\r\n    isTrackingMode = enable;\r\n    \r\n    if (enable) {\r\n        // Добавляем обработчики на все этапы клика\r\n        document.addEventListener('mousedown', detectStrategySettings, true);\r\n        document.addEventListener('mouseup', detectStrategySettings, true);\r\n        document.addEventListener('click', detectStrategySettings, true);\r\n        showNotification('Нажмите кнопку настроек стратегии ');\r\n    } else {\r\n        // Удаляем все обработчики\r\n        document.removeEventListener('mousedown', detectStrategySettings, true);\r\n        document.removeEventListener('mouseup', detectStrategySettings, true);\r\n        document.removeEventListener('click', detectStrategySettings, true);\r\n        showNotification('Отслеживание отменено ');\r\n    }\r\n    \r\n    updateInfoWindow();\r\n}\r\n\r\n// Функция для отслеживания клика по кнопке настроек\r\nfunction detectStrategySettings(event) {\r\n    console.log('detectStrategySettings called, tracking mode:', isTrackingMode);\r\n    \r\n    if (!isTrackingMode) return;\r\n    \r\n    const target = event.target;\r\n    console.log('Click target:', target);\r\n    console.log('Target attributes:', {\r\n        class: target.className,\r\n        dataName: target.getAttribute('data-name'),\r\n        role: target.getAttribute('role'),\r\n        ariaLabel: target.getAttribute('aria-label'),\r\n        innerHTML: target.innerHTML\r\n    });\r\n    \r\n    // Ищем кнопку настроек по разным селекторам\r\n    const settingsButton = target.closest('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j, [data-name=\"legend-settings-action\"]');\r\n    console.log('Found settings button:', settingsButton);\r\n    \r\n    if (settingsButton) {\r\n        // Полностью останавливаем событие на этапе перехвата\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        event.stopImmediatePropagation();\r\n        event.returnValue = false;\r\n        \r\n        // Сохраняем селектор\r\n        if (settingsButton.matches('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j')) {\r\n            strategySettingsSelector = 'button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j';\r\n        } else {\r\n            strategySettingsSelector = '[data-name=\"legend-settings-action\"]';\r\n        }\r\n        \r\n        // Находим индекс кнопки\r\n        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));\r\n        const buttonIndex = allButtons.indexOf(settingsButton);\r\n        console.log('Button index:', buttonIndex, 'of', allButtons.length, 'buttons');\r\n        strategyButtonIndex = buttonIndex;\r\n        \r\n        console.log('Using selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);\r\n        \r\n        // Сначала отключаем отслеживание\r\n        isTrackingMode = false;\r\n        document.removeEventListener('mousedown', detectStrategySettings, true);\r\n        document.removeEventListener('mouseup', detectStrategySettings, true);\r\n        document.removeEventListener('click', detectStrategySettings, true);\r\n        \r\n        // Затем сохраняем информацию и обновляем состояние\r\n        console.log('Setting isStrategySettingsDetected to true');\r\n        isStrategySettingsDetected = true;\r\n        \r\n        // Принудительно пересоздаем окно\r\n        console.log('Recreating info window...');\r\n        if (infoWindow) {\r\n            document.body.removeChild(infoWindow);\r\n        }\r\n        createInfoWindow();\r\n        \r\n        // И только потом сохраняем в storage\r\n        chrome.storage.local.set({\r\n            strategySettingsDetected: true,\r\n            strategySettingsSelector: strategySettingsSelector,\r\n            strategyButtonIndex: strategyButtonIndex\r\n        }, () => {\r\n            console.log('Settings saved to storage');\r\n            showNotification('Кнопка настроек успешно определена! ');\r\n        });\r\n        \r\n        return false;\r\n    }\r\n}\r\n\r\n// Функция для показа уведомления\r\nfunction showNotification(message) {\r\n    const notification = document.createElement('div');\r\n    notification.style.cssText = `\r\n        position: fixed;\r\n        top: 20px;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        background: #131722;\r\n        color: #d1d4dc;\r\n        padding: 10px 20px;\r\n        border-radius: 4px;\r\n        z-index: 9999;\r\n        border: 1px solid #363c4e;\r\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\r\n    `;\r\n    notification.textContent = message;\r\n    document.body.appendChild(notification);\r\n    \r\n    setTimeout(() => {\r\n        notification.remove();\r\n    }, 3000);\r\n}\r\n\r\n// Слушаем сообщения от popup\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    console.log('Received message:', request);\r\n    \r\n    if (request.type === 'GET_TRADING_INFO') {\r\n        sendResponse(getTradingInfo());\r\n    } else if (request.type === 'TOGGLE_INFO_WINDOW') {\r\n        console.log('Toggle info window:', request.show);\r\n        try {\r\n            if (request.show) {\r\n                showInfoWindow();\r\n            } else {\r\n                hideInfoWindow();\r\n            }\r\n            sendResponse({ success: true });\r\n        } catch (error) {\r\n            console.error('Error toggling window:', error);\r\n            sendResponse({ success: false, error: error.message });\r\n        }\r\n    }\r\n    return true;\r\n});\r\n\r\n// При инициализации восстанавливаем сохраненные данные\r\nchrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector', 'showInfoWindow'], (result) => {\r\n    console.log('Loaded storage:', result);\r\n    \r\n    if (result.strategySettingsDetected) {\r\n        isStrategySettingsDetected = true;\r\n        strategySettingsSelector = result.strategySettingsSelector;\r\n        strategyButtonIndex = result.strategyButtonIndex;\r\n        console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);\r\n    }\r\n    \r\n    // Создаем информационное окно только если оно должно быть показано\r\n    const showWindow = result.showInfoWindow !== undefined ? result.showInfoWindow : true;\r\n    if (showWindow) {\r\n        showInfoWindow();\r\n    }\r\n    \r\n    // Запускаем наблюдение за результатами бэктеста\r\n    waitForBacktestResults();\r\n    \r\n    // Запоминаем текущий URL и символ\r\n    let lastUrl = location.href;\r\n    let lastSymbol = '';\r\n    let lastInterval = '';\r\n\r\n    // Слушаем изменения URL и символа\r\n    function checkChanges() {\r\n        const currentUrl = location.href;\r\n        const info = getTradingInfo();\r\n        \r\n        // Проверяем изменение URL\r\n        if (currentUrl !== lastUrl) {\r\n            console.log('URL changed:', currentUrl);\r\n            lastUrl = currentUrl;\r\n            \r\n            // Перезапускаем наблюдение за результатами и проверку кнопки\r\n            if (!isStrategySettingsDetected) {\r\n                setTimeout(checkDefaultSettingsButton, 2000);\r\n            }\r\n            waitForBacktestResults();\r\n        }\r\n        \r\n        // Проверяем изменение символа или интервала\r\n        if (info.symbol !== lastSymbol || info.interval !== lastInterval) {\r\n            console.log('Symbol or interval changed:', info.symbol, info.interval);\r\n            lastSymbol = info.symbol;\r\n            lastInterval = info.interval;\r\n            \r\n            // Обновляем окно если оно существует\r\n            if (infoWindow) {\r\n                updateInfoWindow();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Запускаем периодическую проверку изменений\r\n    setInterval(checkChanges, 1000);\r\n});\r\n\r\n// При загрузке страницы\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    console.log('DOM loaded, checking settings button');\r\n    \r\n    // Даем странице время загрузиться полностью\r\n    setTimeout(() => {\r\n        if (!isStrategySettingsDetected) {\r\n            checkDefaultSettingsButton();\r\n        }\r\n    }, 2000);\r\n});\r\n\r\n// Периодически проверяем наличие кнопки\r\nsetInterval(() => {\r\n    if (!isStrategySettingsDetected) {\r\n        checkDefaultSettingsButton();\r\n    }\r\n}, 5000);\r\n\r\n// Функция инициализации\r\nfunction init() {\r\n    console.log('Initializing TradingView Optimizer...');\r\n    \r\n    chrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector', 'showInfoWindow'], (result) => {\r\n        console.log('Loaded storage:', result);\r\n        \r\n        if (result.strategySettingsDetected) {\r\n            isStrategySettingsDetected = true;\r\n            strategySettingsSelector = result.strategySettingsSelector;\r\n            strategyButtonIndex = result.strategyButtonIndex;\r\n            console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);\r\n        }\r\n        \r\n        // Создаем информационное окно только если оно должно быть показано\r\n        const showWindow = result.showInfoWindow !== undefined ? result.showInfoWindow : true;\r\n        if (showWindow) {\r\n            showInfoWindow();\r\n        }\r\n        \r\n        // Запускаем наблюдение за результатами бэктеста\r\n        waitForBacktestResults();\r\n        \r\n        // Запускаем проверку кнопки настроек\r\n        if (!isStrategySettingsDetected) {\r\n            setTimeout(checkDefaultSettingsButton, 2000);\r\n        }\r\n    });\r\n}\r\n\r\n// Запускаем инициализацию\r\ninit();\r\n\r\n// Функция ожидания результатов бэктеста\r\nlet backtestObserver = null;\r\nlet resultsCheckInterval = null;\r\nlet containerSearchInterval = null;\r\n\r\nfunction waitForBacktestResults() {\r\n    // Очищаем предыдущий интервал если есть\r\n    if (resultsCheckInterval) {\r\n        clearInterval(resultsCheckInterval);\r\n        resultsCheckInterval = null;\r\n    }\r\n\r\n    console.log('Starting to wait for backtest results');\r\n    resultsCheckInterval = setInterval(() => {\r\n        // Проверяем наличие контейнера с результатами\r\n        const container = document.querySelector('.container-Yvm0jjs7');\r\n        if (!container) {\r\n            console.log('Waiting for container...');\r\n            return;\r\n        }\r\n\r\n        // Проверяем, что контейнер видим\r\n        if (container.offsetParent === null) {\r\n            console.log('Container is hidden, waiting...');\r\n            return;\r\n        }\r\n\r\n        // Проверяем, загружены ли результаты\r\n        const results = parseBacktestResults();\r\n        if (results) {\r\n            console.log('Backtest results found:', results);\r\n            clearInterval(resultsCheckInterval);\r\n            resultsCheckInterval = null;\r\n\r\n            // Запускаем наблюдение за изменениями\r\n            startBacktestObserver();\r\n            \r\n            // Обновляем окно с результатами\r\n            if (infoWindow) {\r\n                updateInfoWindow();\r\n            }\r\n        } else {\r\n            console.log('Results not ready yet...');\r\n        }\r\n    }, 500); // Проверяем каждые 500мс\r\n\r\n    // Останавливаем проверку через 10 секунд если результаты не найдены\r\n    setTimeout(() => {\r\n        if (resultsCheckInterval) {\r\n            console.log('Timeout waiting for backtest results');\r\n            clearInterval(resultsCheckInterval);\r\n            resultsCheckInterval = null;\r\n        }\r\n    }, 10000);\r\n}\r\n\r\nfunction startBacktestObserver() {\r\n    // Очищаем предыдущие интервалы\r\n    if (containerSearchInterval) {\r\n        clearInterval(containerSearchInterval);\r\n        containerSearchInterval = null;\r\n    }\r\n    if (backtestObserver) {\r\n        backtestObserver.disconnect();\r\n        backtestObserver = null;\r\n    }\r\n\r\n    console.log('Starting backtest observer');\r\n    \r\n    // Функция для наблюдения за значениями\r\n    const startValuesObserver = (container) => {\r\n        if (!container) return;\r\n\r\n        // Находим все элементы со значениями\r\n        const valueElements = container.querySelectorAll('.positiveValue-Yvm0jjs7, .negativeValue-Yvm0jjs7, .additionalPercent-Yvm0jjs7');\r\n        console.log('Found value elements:', valueElements.length);\r\n\r\n        if (backtestObserver) {\r\n            backtestObserver.disconnect();\r\n        }\r\n\r\n        backtestObserver = new MutationObserver((mutations) => {\r\n            let needsUpdate = false;\r\n            \r\n            for (const mutation of mutations) {\r\n                if (mutation.type === 'characterData') {\r\n                    const targetElement = mutation.target.parentElement;\r\n                    if (targetElement && (\r\n                        targetElement.classList.contains('positiveValue-Yvm0jjs7') ||\r\n                        targetElement.classList.contains('negativeValue-Yvm0jjs7') ||\r\n                        targetElement.classList.contains('additionalPercent-Yvm0jjs7')\r\n                    )) {\r\n                        console.log('Value changed:', {\r\n                            element: targetElement.className,\r\n                            oldValue: mutation.oldValue,\r\n                            newValue: mutation.target.textContent\r\n                        });\r\n                        needsUpdate = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (needsUpdate && infoWindow) {\r\n                console.log('Updating info window due to value changes');\r\n                updateResults();\r\n            }\r\n        });\r\n\r\n        // Наблюдаем за изменениями текста во всех элементах со значениями\r\n        valueElements.forEach(element => {\r\n            backtestObserver.observe(element, {\r\n                characterData: true,\r\n                characterDataOldValue: true,\r\n                subtree: true\r\n            });\r\n        });\r\n\r\n        // Наблюдаем за изменениями в контейнере для отслеживания новых значений\r\n        backtestObserver.observe(container, {\r\n            childList: true,\r\n            subtree: true\r\n        });\r\n\r\n        // Запускаем первичное обновление\r\n        updateResults();\r\n    };\r\n\r\n    // Функция обновления результатов\r\n    const updateResults = () => {\r\n        const results = parseBacktestResults();\r\n        if (results && infoWindow) {\r\n            console.log('Updating results:', results);\r\n            updateInfoWindow();\r\n        }\r\n    };\r\n\r\n    // Функция поиска и наблюдения за контейнером\r\n    const findAndObserveContainer = () => {\r\n        const container = document.querySelector('.container-Yvm0jjs7');\r\n        if (container) {\r\n            console.log('Found backtest results container');\r\n            startValuesObserver(container);\r\n            return true;\r\n        }\r\n        console.log('Container not found');\r\n        return false;\r\n    };\r\n\r\n    // Запускаем интервал поиска и обновления\r\n    containerSearchInterval = setInterval(() => {\r\n        const container = document.querySelector('.container-Yvm0jjs7');\r\n        if (container) {\r\n            // Если контейнер существует, проверяем обновились ли данные\r\n            const results = parseBacktestResults();\r\n            if (results) {\r\n                console.log('Container exists, checking for updates');\r\n                updateResults();\r\n            }\r\n        } else {\r\n            // Если контейнер не существует, пытаемся найти его\r\n            console.log('Searching for container...');\r\n            findAndObserveContainer();\r\n        }\r\n    }, 500);\r\n\r\n    // Первая попытка поиска\r\n    findAndObserveContainer();\r\n}\r\n\r\nfunction cleanupObservers() {\r\n    if (backtestObserver) {\r\n        backtestObserver.disconnect();\r\n        backtestObserver = null;\r\n    }\r\n    if (containerSearchInterval) {\r\n        clearInterval(containerSearchInterval);\r\n        containerSearchInterval = null;\r\n    }\r\n}\r\n"],"names":["isUpdating","updateQueue","createInfoWindow","infoWindow","console","log","window","document","createElement","className","style","cssText","body","appendChild","currentX","currentY","initialX","initialY","isDragging","xOffset","yOffset","dragStart","e","type","touches","clientX","clientY","target","dragEnd","chrome","storage","local","set","windowPosition","top","right","drag","preventDefault","transform","concat","addEventListener","makeWindowDraggable","setTimeout","updateInfoWindow","arguments","length","undefined","info","getTradingInfo","results","parseBacktestResults","content","innerHTML","symbol","interval","isStrategySettingsDetected","isTrackingMode","num","netProfit","isNaN","formatUSDT","formatPercent","netProfitPercent","totalTrades","percentProfitable","decimals","toFixed","formatNumber","profitFactor","maxDrawdown","maxDrawdownPercent","avgTrade","avgTradePercent","avgBarsInTrade","openButton","querySelector","openStrategySettings","detectButton","detectStrategySettings","symbolElement","intervalElement","textContent","trim","error","strategySettingsSelector","strategyButtonIndex","DEFAULT_SETTINGS_BUTTON_SELECTOR","container","cells","querySelectorAll","forEach","cell","_cell$querySelector","_cell$querySelector2","_cell$querySelector3","title","value","additionalPercent","parseFloat","replace","parseInt","checkDefaultSettingsButton","defaultButton","strategySettingsDetected","enable","simulateClick","allButtons","Array","from","settingsButton","showNotification","element","clickEvent","MouseEvent","bubbles","cancelable","view","dispatchEvent","mouseDownEvent","mouseUpEvent","click","showInfoWindow","waitForBacktestResults","event","class","dataName","getAttribute","role","ariaLabel","closest","stopPropagation","stopImmediatePropagation","returnValue","matches","buttonIndex","indexOf","removeEventListener","removeChild","message","notification","remove","runtime","onMessage","addListener","request","sender","sendResponse","show","backtestObserver","disconnect","containerSearchInterval","clearInterval","success","get","result","lastUrl","location","href","lastSymbol","lastInterval","setInterval","currentUrl","resultsCheckInterval","offsetParent","startValuesObserver","valueElements","MutationObserver","mutations","_step","needsUpdate","_iterator","_createForOfIteratorHelper","s","n","done","mutation","targetElement","parentElement","classList","contains","oldValue","newValue","err","f","updateResults","observe","characterData","characterDataOldValue","subtree","childList","findAndObserveContainer","startBacktestObserver"],"sourceRoot":""}