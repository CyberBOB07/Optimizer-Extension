{"version":3,"file":"content.js","mappings":"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","sources":["webpack://tradingview-optimizer/./src/index.js"],"sourcesContent":["// Глобальные переменные для отслеживания состояния\nlet isUpdating = false;\nlet updateQueue = false;\n\n// Функция создания информационного окна\nfunction createInfoWindow() {\n    if (infoWindow) {\n        console.log('Window already exists, skipping creation');\n        return infoWindow;\n    }\n\n    console.log('Creating new info window');\n    const window = document.createElement('div');\n    window.className = 'tv-optimizer-window';\n    window.style.cssText = `\n        position: fixed;\n        top: 50px;\n        right: 50px;\n        background: #131722;\n        color: #d1d4dc;\n        border: 1px solid #363c4e;\n        border-radius: 3px;\n        padding: 8px;\n        z-index: 999;\n        min-width: 200px;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n        font-size: 12px;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n        user-select: none;\n    `;\n    \n    document.body.appendChild(window);\n    infoWindow = window;\n    makeWindowDraggable(window);\n    \n    // Обновляем содержимое окна после его создания\n    setTimeout(() => updateInfoWindow(window), 0);\n    \n    return window;\n}\n\n// Функция обновления содержимого окна\nfunction updateInfoWindow(window = infoWindow) {\n    if (!window) {\n        console.log('No window to update');\n        return;\n    }\n\n    // Защита от рекурсии\n    if (isUpdating) {\n        console.log('Already updating, queuing next update');\n        updateQueue = true;\n        return;\n    }\n\n    try {\n        isUpdating = true;\n        console.log('Updating info window');\n        \n        const info = getTradingInfo();\n        const results = parseBacktestResults();\n\n        // Создаем новый div для контента\n        const content = document.createElement('div');\n        content.className = 'content';\n        content.innerHTML = `\n            <div style=\"margin-bottom: 4px; color: #d1d4dc;\">TradingView Optimizer</div>\n            <div style=\"font-size: 11px; opacity: 0.8; color: #787b86;\">\n                <div>Symbol: ${info.symbol}</div>\n                <div>Interval: ${info.interval}</div>\n                <div>Settings: ${isStrategySettingsDetected ? '✅' : '❌'}</div>\n                <div>Tracking: ${isTrackingMode ? '🔍' : '⏸️'}</div>\n            </div>\n            ${!isStrategySettingsDetected ? `\n                <button class=\"tv-optimizer-button\" id=\"detectButton\" style=\"\n                    background: #2962ff;\n                    color: #fff;\n                    border: none;\n                    border-radius: 2px;\n                    padding: 4px 8px;\n                    margin-top: 8px;\n                    cursor: pointer;\n                    font-size: 11px;\n                    width: 100%;\n                \">Detect Settings Button</button>\n            ` : `\n                <button class=\"tv-optimizer-button\" id=\"openButton\" style=\"\n                    background: #2962ff;\n                    color: #fff;\n                    border: none;\n                    border-radius: 2px;\n                    padding: 4px 8px;\n                    margin-top: 8px;\n                    cursor: pointer;\n                    font-size: 11px;\n                    width: 100%;\n                \">Open Strategy Settings</button>\n            `}\n            ${results ? `\n                <div style=\"margin-top: 8px; border-top: 1px solid #363c4e; padding-top: 8px;\">\n                    <div style=\"margin-bottom: 4px;\">Backtest Results:</div>\n                    <div style=\"font-size: 11px;\">\n                        <div>Net Profit: <span class=\"${getValueClass(results.netProfit)}\">${formatUSDT(results.netProfit)} (${formatPercent(results.netProfitPercent)})</span></div>\n                        <div>Total Trades: ${results.totalTrades}</div>\n                        <div>Percent Profitable: ${formatPercent(results.percentProfitable)}</div>\n                        <div>Profit Factor: ${formatNumber(results.profitFactor)}</div>\n                        <div>Max Drawdown: ${formatUSDT(results.maxDrawdown)} (${formatPercent(results.maxDrawdownPercent)})</div>\n                        <div>Avg Trade: ${formatUSDT(results.avgTrade)} (${formatPercent(results.avgTradePercent)})</div>\n                        <div>Avg # Bars: ${results.avgBarsInTrade}</div>\n                    </div>\n                </div>\n            ` : ''}\n        `;\n\n        // Очищаем окно и добавляем новый контент\n        window.innerHTML = '';\n        window.appendChild(content);\n\n        // Добавляем обработчики для кнопок\n        if (!isStrategySettingsDetected) {\n            const detectButton = window.querySelector('#detectButton');\n            if (detectButton) {\n                detectButton.addEventListener('click', detectStrategySettings);\n            }\n        } else {\n            const openButton = window.querySelector('#openButton');\n            if (openButton) {\n                openButton.addEventListener('click', openStrategySettings);\n            }\n        }\n    } finally {\n        isUpdating = false;\n        if (updateQueue) {\n            updateQueue = false;\n            updateInfoWindow();\n        }\n    }\n}\n\n// Функция получения информации о торговле\nfunction getTradingInfo() {\n    try {\n        // Селектор для символа: кнопка с текущим символом в верхнем тулбаре\n        const symbolElement = document.querySelector('[data-name=\"legend-series-item\"] [data-name=\"legend-source-title\"]');\n        \n        // Селектор для интервала: кнопка с текущим интервалом\n        const intervalElement = document.querySelector('button.title-l31H9iuA.accessible-l31H9iuA[aria-label=\"Change interval\"]');\n        \n        return {\n            symbol: symbolElement ? symbolElement.textContent.trim() : 'Не определен',\n            interval: intervalElement ? intervalElement.textContent.trim() : 'Не определен'\n        };\n    } catch (error) {\n        console.error('Ошибка получения данных:', error);\n        return {\n            symbol: 'Ошибка',\n            interval: 'Ошибка'\n        };\n    }\n}\n\n// Глобальные переменные\nlet infoWindow = null;\nlet isTrackingMode = false;\nlet isStrategySettingsDetected = false;\nlet strategySettingsSelector = '';\nlet strategyButtonIndex = -1;\nconst DEFAULT_SETTINGS_BUTTON_SELECTOR = 'button[title=\"Settings\"].apply-common-tooltip';\n\n// Структура для хранения результатов бэктеста\nlet backtestResults = {\n    netProfit: null,\n    netProfitPercent: null,\n    totalTrades: null,\n    percentProfitable: null,\n    profitFactor: null,\n    maxDrawdown: null,\n    maxDrawdownPercent: null,\n    avgTrade: null,\n    avgTradePercent: null,\n    avgBarsInTrade: null\n};\n\n// Функция парсинга результатов бэктеста\nfunction parseBacktestResults() {\n    const container = document.querySelector('.container-Yvm0jjs7');\n    if (!container) {\n        console.log('Container not found');\n        return null;\n    }\n\n    try {\n        // Находим все ячейки с данными\n        const cells = container.querySelectorAll('.containerCell-Yvm0jjs7');\n        if (!cells || cells.length === 0) {\n            console.log('No cells found');\n            return null;\n        }\n\n        const results = {};\n        \n        cells.forEach(cell => {\n            const title = cell.querySelector('.title-Yvm0jjs7')?.textContent;\n            const value = cell.querySelector('.secondRow-Yvm0jjs7 div:first-child')?.textContent;\n            const additionalPercent = cell.querySelector('.additionalPercent-Yvm0jjs7')?.textContent;\n            \n            if (title && value) {\n                switch (title.trim()) {\n                    case 'Net Profit':\n                        results.netProfit = parseFloat(value.replace(/[^0-9.-]/g, ''));\n                        if (additionalPercent) {\n                            results.netProfitPercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));\n                        }\n                        break;\n                    case 'Total Closed Trades':\n                        results.totalTrades = parseInt(value);\n                        break;\n                    case 'Percent Profitable':\n                        results.percentProfitable = parseFloat(value.replace('%', ''));\n                        break;\n                    case 'Profit Factor':\n                        results.profitFactor = parseFloat(value);\n                        break;\n                    case 'Max Drawdown':\n                        results.maxDrawdown = parseFloat(value.replace(/[^0-9.-]/g, ''));\n                        if (additionalPercent) {\n                            results.maxDrawdownPercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));\n                        }\n                        break;\n                    case 'Avg Trade':\n                        results.avgTrade = parseFloat(value.replace(/[^0-9.-]/g, ''));\n                        if (additionalPercent) {\n                            results.avgTradePercent = parseFloat(additionalPercent.replace(/[^0-9.-]/g, ''));\n                        }\n                        break;\n                    case 'Avg # Bars in Trades':\n                        results.avgBarsInTrade = parseFloat(value);\n                        break;\n                }\n            }\n        });\n\n        // Проверяем, что у нас есть хотя бы основные результаты\n        if (results.netProfit !== undefined && results.totalTrades !== undefined) {\n            console.log('Results parsed successfully:', results);\n            return results;\n        }\n\n        console.log('Not all required results found');\n        return null;\n    } catch (error) {\n        console.error('Error parsing results:', error);\n        return null;\n    }\n}\n\nfunction formatNumber(num, decimals = 2) {\n    if (num === null || num === undefined || isNaN(num)) return '—';\n    return num.toFixed(decimals);\n}\n\nfunction formatPercent(num) {\n    if (num === null || num === undefined || isNaN(num)) return '—';\n    return `${num.toFixed(2)}%`;\n}\n\nfunction formatUSDT(num) {\n    if (num === null || num === undefined || isNaN(num)) return '—';\n    return `${num.toFixed(2)} USDT`;\n}\n\nfunction getValueClass(num) {\n    if (num === null || num === undefined || isNaN(num)) return '';\n    return num > 0 ? 'positive' : num < 0 ? 'negative' : '';\n}\n\n// Функция проверки доступности кнопки настроек\nfunction checkDefaultSettingsButton() {\n    console.log('Checking default settings button');\n    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);\n    console.log('Default button found:', defaultButton);\n    \n    if (defaultButton) {\n        // Сохраняем эту кнопку как основную\n        strategySettingsSelector = DEFAULT_SETTINGS_BUTTON_SELECTOR;\n        strategyButtonIndex = 0; // Эта кнопка всегда одна\n        isStrategySettingsDetected = true;\n        \n        // Сохраняем в storage\n        chrome.storage.local.set({\n            strategySettingsDetected: true,\n            strategySettingsSelector: strategySettingsSelector,\n            strategyButtonIndex: strategyButtonIndex\n        }, () => {\n            console.log('Default settings button saved');\n            updateInfoWindow();\n        });\n        \n        return true;\n    }\n    \n    return false;\n}\n\n// Функция для открытия настроек стратегии\nfunction openStrategySettings() {\n    console.log('Trying to open strategy settings');\n    \n    // Пробуем найти кнопку по основному селектору\n    const defaultButton = document.querySelector(DEFAULT_SETTINGS_BUTTON_SELECTOR);\n    console.log('Default settings button:', defaultButton);\n    \n    if (defaultButton) {\n        console.log('Using default settings button');\n        simulateClick(defaultButton);\n        return true;\n    }\n    \n    // Если не нашли, используем сохраненную кнопку\n    if (strategySettingsSelector && strategySettingsSelector !== DEFAULT_SETTINGS_BUTTON_SELECTOR) {\n        console.log('Trying to find settings button with selector:', strategySettingsSelector, 'index:', strategyButtonIndex);\n        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));\n        console.log('Found buttons:', allButtons.length);\n        \n        if (allButtons.length > strategyButtonIndex) {\n            const settingsButton = allButtons[strategyButtonIndex];\n            console.log('Using saved button:', settingsButton);\n            simulateClick(settingsButton);\n            return true;\n        }\n    }\n    \n    // Если не нашли ни одну кнопку, показываем сообщение и включаем отслеживание\n    showNotification('Кнопка не найдена. Включаю режим отслеживания ');\n    toggleTrackingMode(true);\n    return false;\n}\n\n// Функция сброса настроек\nfunction resetSettings() {\n    console.log('Resetting settings');\n    isStrategySettingsDetected = false;\n    strategySettingsSelector = '';\n    strategyButtonIndex = -1;\n    \n    // Сохраняем новое состояние\n    chrome.storage.local.set({\n        strategySettingsDetected: false,\n        strategySettingsSelector: '',\n        strategyButtonIndex: -1\n    }, () => {\n        console.log('Settings reset');\n        showNotification('Настройки сброшены ');\n        // Пересоздаем окно\n        if (infoWindow) {\n            document.body.removeChild(infoWindow);\n        }\n        createInfoWindow();\n    });\n}\n\n// Функция для симуляции клика\nfunction simulateClick(element) {\n    console.log('Simulating click on element:', element);\n    \n    // Пробуем разные способы клика\n    try {\n        // 1. Создаем и диспатчим событие click\n        const clickEvent = new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            view: window\n        });\n        element.dispatchEvent(clickEvent);\n        \n        // 2. Если не сработало, пробуем mousedown/mouseup\n        const mouseDownEvent = new MouseEvent('mousedown', {\n            bubbles: true,\n            cancelable: true,\n            view: window\n        });\n        const mouseUpEvent = new MouseEvent('mouseup', {\n            bubbles: true,\n            cancelable: true,\n            view: window\n        });\n        element.dispatchEvent(mouseDownEvent);\n        element.dispatchEvent(mouseUpEvent);\n        \n        // 3. Пробуем программный клик\n        element.click();\n        \n    } catch (error) {\n        console.error('Error simulating click:', error);\n    }\n}\n\n// Функция для перетаскивания окна\nfunction makeWindowDraggable(window) {\n    let isDragging = false;\n    let currentX;\n    let currentY;\n    let initialX;\n    let initialY;\n    let xOffset = 0;\n    let yOffset = 0;\n    \n    function dragStart(e) {\n        if (e.type === \"touchstart\") {\n            initialX = e.touches[0].clientX - xOffset;\n            initialY = e.touches[0].clientY - yOffset;\n        } else {\n            initialX = e.clientX - xOffset;\n            initialY = e.clientY - yOffset;\n        }\n        \n        if (e.target === window) {\n            isDragging = true;\n        }\n    }\n    \n    function dragEnd() {\n        if (!isDragging) return;\n        \n        initialX = currentX;\n        initialY = currentY;\n        isDragging = false;\n        \n        // Сохраняем позицию\n        chrome.storage.local.set({\n            windowPosition: {\n                top: window.style.top,\n                right: window.style.right\n            }\n        });\n    }\n    \n    function drag(e) {\n        if (!isDragging) return;\n        \n        e.preventDefault();\n        \n        if (e.type === \"touchmove\") {\n            currentX = e.touches[0].clientX - initialX;\n            currentY = e.touches[0].clientY - initialY;\n        } else {\n            currentX = e.clientX - initialX;\n            currentY = e.clientY - initialY;\n        }\n        \n        xOffset = currentX;\n        yOffset = currentY;\n        window.style.transform = `translate(${currentX}px, ${currentY}px)`;\n    }\n    \n    window.addEventListener(\"touchstart\", dragStart, false);\n    window.addEventListener(\"touchend\", dragEnd, false);\n    window.addEventListener(\"touchmove\", drag, false);\n    window.addEventListener(\"mousedown\", dragStart, false);\n    window.addEventListener(\"mouseup\", dragEnd, false);\n    window.addEventListener(\"mousemove\", drag, false);\n}\n\n// Функции управления окном\nfunction showInfoWindow() {\n    console.log('Showing info window');\n    if (!infoWindow) {\n        const window = createInfoWindow();\n        if (window) {\n            console.log('Window created successfully');\n            // Запускаем ожидание результатов после создания окна\n            waitForBacktestResults();\n        }\n    } else {\n        console.log('Window already exists, updating');\n        updateInfoWindow();\n    }\n}\n\nfunction hideInfoWindow() {\n    console.log('Hiding info window');\n    if (infoWindow) {\n        // Останавливаем все наблюдатели\n        cleanupObservers();\n        infoWindow.remove();\n        infoWindow = null;\n    }\n}\n\n// Функция для включения/выключения режима отслеживания\nfunction toggleTrackingMode(enable) {\n    console.log('toggleTrackingMode:', enable);\n    isTrackingMode = enable;\n    \n    if (enable) {\n        // Добавляем обработчики на все этапы клика\n        document.addEventListener('mousedown', detectStrategySettings, true);\n        document.addEventListener('mouseup', detectStrategySettings, true);\n        document.addEventListener('click', detectStrategySettings, true);\n        showNotification('Нажмите кнопку настроек стратегии ');\n    } else {\n        // Удаляем все обработчики\n        document.removeEventListener('mousedown', detectStrategySettings, true);\n        document.removeEventListener('mouseup', detectStrategySettings, true);\n        document.removeEventListener('click', detectStrategySettings, true);\n        showNotification('Отслеживание отменено ');\n    }\n    \n    updateInfoWindow();\n}\n\n// Функция для отслеживания клика по кнопке настроек\nfunction detectStrategySettings(event) {\n    console.log('detectStrategySettings called, tracking mode:', isTrackingMode);\n    \n    if (!isTrackingMode) return;\n    \n    const target = event.target;\n    console.log('Click target:', target);\n    console.log('Target attributes:', {\n        class: target.className,\n        dataName: target.getAttribute('data-name'),\n        role: target.getAttribute('role'),\n        ariaLabel: target.getAttribute('aria-label'),\n        innerHTML: target.innerHTML\n    });\n    \n    // Ищем кнопку настроек по разным селекторам\n    const settingsButton = target.closest('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j, [data-name=\"legend-settings-action\"]');\n    console.log('Found settings button:', settingsButton);\n    \n    if (settingsButton) {\n        // Полностью останавливаем событие на этапе перехвата\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n        event.returnValue = false;\n        \n        // Сохраняем селектор\n        if (settingsButton.matches('button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j')) {\n            strategySettingsSelector = 'button.lightButton-bYDQcOkp.ghost-PVWoXu5j.gray-PVWoXu5j';\n        } else {\n            strategySettingsSelector = '[data-name=\"legend-settings-action\"]';\n        }\n        \n        // Находим индекс кнопки\n        const allButtons = Array.from(document.querySelectorAll(strategySettingsSelector));\n        const buttonIndex = allButtons.indexOf(settingsButton);\n        console.log('Button index:', buttonIndex, 'of', allButtons.length, 'buttons');\n        strategyButtonIndex = buttonIndex;\n        \n        console.log('Using selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);\n        \n        // Сначала отключаем отслеживание\n        isTrackingMode = false;\n        document.removeEventListener('mousedown', detectStrategySettings, true);\n        document.removeEventListener('mouseup', detectStrategySettings, true);\n        document.removeEventListener('click', detectStrategySettings, true);\n        \n        // Затем сохраняем информацию и обновляем состояние\n        console.log('Setting isStrategySettingsDetected to true');\n        isStrategySettingsDetected = true;\n        \n        // Принудительно пересоздаем окно\n        console.log('Recreating info window...');\n        if (infoWindow) {\n            document.body.removeChild(infoWindow);\n        }\n        createInfoWindow();\n        \n        // И только потом сохраняем в storage\n        chrome.storage.local.set({\n            strategySettingsDetected: true,\n            strategySettingsSelector: strategySettingsSelector,\n            strategyButtonIndex: strategyButtonIndex\n        }, () => {\n            console.log('Settings saved to storage');\n            showNotification('Кнопка настроек успешно определена! ');\n        });\n        \n        return false;\n    }\n}\n\n// Функция для показа уведомления\nfunction showNotification(message) {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        left: 50%;\n        transform: translateX(-50%);\n        background: #131722;\n        color: #d1d4dc;\n        padding: 10px 20px;\n        border-radius: 4px;\n        z-index: 9999;\n        border: 1px solid #363c4e;\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    `;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n        notification.remove();\n    }, 3000);\n}\n\n// Слушаем сообщения от popup\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('Received message:', request);\n    \n    if (request.type === 'GET_TRADING_INFO') {\n        sendResponse(getTradingInfo());\n    } else if (request.type === 'TOGGLE_INFO_WINDOW') {\n        console.log('Toggle info window:', request.show);\n        try {\n            if (request.show) {\n                showInfoWindow();\n            } else {\n                hideInfoWindow();\n            }\n            sendResponse({ success: true });\n        } catch (error) {\n            console.error('Error toggling window:', error);\n            sendResponse({ success: false, error: error.message });\n        }\n    }\n    return true;\n});\n\n// При инициализации восстанавливаем сохраненные данные\nchrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector', 'showInfoWindow'], (result) => {\n    console.log('Loaded storage:', result);\n    \n    if (result.strategySettingsDetected) {\n        isStrategySettingsDetected = true;\n        strategySettingsSelector = result.strategySettingsSelector;\n        strategyButtonIndex = result.strategyButtonIndex;\n        console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);\n    }\n    \n    // Создаем информационное окно только если оно должно быть показано\n    const showWindow = result.showInfoWindow !== undefined ? result.showInfoWindow : true;\n    if (showWindow) {\n        showInfoWindow();\n    }\n    \n    // Запускаем наблюдение за результатами бэктеста\n    waitForBacktestResults();\n    \n    // Запоминаем текущий URL и символ\n    let lastUrl = location.href;\n    let lastSymbol = '';\n    let lastInterval = '';\n\n    // Слушаем изменения URL и символа\n    function checkChanges() {\n        const currentUrl = location.href;\n        const info = getTradingInfo();\n        \n        // Проверяем изменение URL\n        if (currentUrl !== lastUrl) {\n            console.log('URL changed:', currentUrl);\n            lastUrl = currentUrl;\n            \n            // Перезапускаем наблюдение за результатами и проверку кнопки\n            if (!isStrategySettingsDetected) {\n                setTimeout(checkDefaultSettingsButton, 2000);\n            }\n            waitForBacktestResults();\n        }\n        \n        // Проверяем изменение символа или интервала\n        if (info.symbol !== lastSymbol || info.interval !== lastInterval) {\n            console.log('Symbol or interval changed:', info.symbol, info.interval);\n            lastSymbol = info.symbol;\n            lastInterval = info.interval;\n            \n            // Обновляем окно если оно существует\n            if (infoWindow) {\n                updateInfoWindow();\n            }\n        }\n    }\n\n    // Запускаем периодическую проверку изменений\n    setInterval(checkChanges, 1000);\n});\n\n// При загрузке страницы\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM loaded, checking settings button');\n    \n    // Даем странице время загрузиться полностью\n    setTimeout(() => {\n        if (!isStrategySettingsDetected) {\n            checkDefaultSettingsButton();\n        }\n    }, 2000);\n});\n\n// Периодически проверяем наличие кнопки\nsetInterval(() => {\n    if (!isStrategySettingsDetected) {\n        checkDefaultSettingsButton();\n    }\n}, 5000);\n\n// Функция инициализации\nfunction init() {\n    console.log('Initializing TradingView Optimizer...');\n    \n    chrome.storage.local.get(['strategyButtonIndex', 'strategySettingsDetected', 'strategySettingsSelector', 'showInfoWindow'], (result) => {\n        console.log('Loaded storage:', result);\n        \n        if (result.strategySettingsDetected) {\n            isStrategySettingsDetected = true;\n            strategySettingsSelector = result.strategySettingsSelector;\n            strategyButtonIndex = result.strategyButtonIndex;\n            console.log('Restored settings selector:', strategySettingsSelector, 'with index:', strategyButtonIndex);\n        }\n        \n        // Создаем информационное окно только если оно должно быть показано\n        const showWindow = result.showInfoWindow !== undefined ? result.showInfoWindow : true;\n        if (showWindow) {\n            showInfoWindow();\n        }\n        \n        // Запускаем наблюдение за результатами бэктеста\n        waitForBacktestResults();\n        \n        // Запускаем проверку кнопки настроек\n        if (!isStrategySettingsDetected) {\n            setTimeout(checkDefaultSettingsButton, 2000);\n        }\n    });\n}\n\n// Запускаем инициализацию\ninit();\n\n// Функция ожидания результатов бэктеста\nlet backtestObserver = null;\nlet resultsCheckInterval = null;\nlet containerSearchInterval = null;\n\nfunction waitForBacktestResults() {\n    // Очищаем предыдущий интервал если есть\n    if (resultsCheckInterval) {\n        clearInterval(resultsCheckInterval);\n        resultsCheckInterval = null;\n    }\n\n    console.log('Starting to wait for backtest results');\n    resultsCheckInterval = setInterval(() => {\n        // Проверяем наличие контейнера с результатами\n        const container = document.querySelector('.container-Yvm0jjs7');\n        if (!container) {\n            console.log('Waiting for container...');\n            return;\n        }\n\n        // Проверяем, что контейнер видим\n        if (container.offsetParent === null) {\n            console.log('Container is hidden, waiting...');\n            return;\n        }\n\n        // Проверяем, загружены ли результаты\n        const results = parseBacktestResults();\n        if (results) {\n            console.log('Backtest results found:', results);\n            clearInterval(resultsCheckInterval);\n            resultsCheckInterval = null;\n\n            // Запускаем наблюдение за изменениями\n            startBacktestObserver();\n            \n            // Обновляем окно с результатами\n            if (infoWindow) {\n                updateInfoWindow();\n            }\n        } else {\n            console.log('Results not ready yet...');\n        }\n    }, 500); // Проверяем каждые 500мс\n\n    // Останавливаем проверку через 10 секунд если результаты не найдены\n    setTimeout(() => {\n        if (resultsCheckInterval) {\n            console.log('Timeout waiting for backtest results');\n            clearInterval(resultsCheckInterval);\n            resultsCheckInterval = null;\n        }\n    }, 10000);\n}\n\nfunction startBacktestObserver() {\n    // Очищаем предыдущие интервалы\n    if (containerSearchInterval) {\n        clearInterval(containerSearchInterval);\n        containerSearchInterval = null;\n    }\n    if (backtestObserver) {\n        backtestObserver.disconnect();\n        backtestObserver = null;\n    }\n\n    console.log('Starting backtest observer');\n    \n    // Функция для наблюдения за значениями\n    const startValuesObserver = (container) => {\n        if (!container) return;\n\n        // Находим все элементы со значениями\n        const valueElements = container.querySelectorAll('.positiveValue-Yvm0jjs7, .negativeValue-Yvm0jjs7, .additionalPercent-Yvm0jjs7');\n        console.log('Found value elements:', valueElements.length);\n\n        if (backtestObserver) {\n            backtestObserver.disconnect();\n        }\n\n        backtestObserver = new MutationObserver((mutations) => {\n            let needsUpdate = false;\n            \n            for (const mutation of mutations) {\n                if (mutation.type === 'characterData') {\n                    const targetElement = mutation.target.parentElement;\n                    if (targetElement && (\n                        targetElement.classList.contains('positiveValue-Yvm0jjs7') ||\n                        targetElement.classList.contains('negativeValue-Yvm0jjs7') ||\n                        targetElement.classList.contains('additionalPercent-Yvm0jjs7')\n                    )) {\n                        console.log('Value changed:', {\n                            element: targetElement.className,\n                            oldValue: mutation.oldValue,\n                            newValue: mutation.target.textContent\n                        });\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            if (needsUpdate && infoWindow) {\n                console.log('Updating info window due to value changes');\n                updateResults();\n            }\n        });\n\n        // Наблюдаем за изменениями текста во всех элементах со значениями\n        valueElements.forEach(element => {\n            backtestObserver.observe(element, {\n                characterData: true,\n                characterDataOldValue: true,\n                subtree: true\n            });\n        });\n\n        // Наблюдаем за изменениями в контейнере для отслеживания новых значений\n        backtestObserver.observe(container, {\n            childList: true,\n            subtree: true\n        });\n\n        // Запускаем первичное обновление\n        updateResults();\n    };\n\n    // Функция обновления результатов\n    const updateResults = () => {\n        const results = parseBacktestResults();\n        if (results && infoWindow) {\n            console.log('Updating results:', results);\n            updateInfoWindow();\n        }\n    };\n\n    // Функция поиска и наблюдения за контейнером\n    const findAndObserveContainer = () => {\n        const container = document.querySelector('.container-Yvm0jjs7');\n        if (container) {\n            console.log('Found backtest results container');\n            startValuesObserver(container);\n            return true;\n        }\n        console.log('Container not found');\n        return false;\n    };\n\n    // Запускаем интервал поиска и обновления\n    containerSearchInterval = setInterval(() => {\n        const container = document.querySelector('.container-Yvm0jjs7');\n        if (container) {\n            // Если контейнер существует, проверяем обновились ли данные\n            const results = parseBacktestResults();\n            if (results) {\n                console.log('Container exists, checking for updates');\n                updateResults();\n            }\n        } else {\n            // Если контейнер не существует, пытаемся найти его\n            console.log('Searching for container...');\n            findAndObserveContainer();\n        }\n    }, 500);\n\n    // Первая попытка поиска\n    findAndObserveContainer();\n}\n\nfunction cleanupObservers() {\n    if (backtestObserver) {\n        backtestObserver.disconnect();\n        backtestObserver = null;\n    }\n    if (containerSearchInterval) {\n        clearInterval(containerSearchInterval);\n        containerSearchInterval = null;\n    }\n}\n"],"names":["isUpdating","updateQueue","createInfoWindow","infoWindow","console","log","window","document","createElement","className","style","cssText","body","appendChild","currentX","currentY","initialX","initialY","isDragging","xOffset","yOffset","dragStart","e","type","touches","clientX","clientY","target","dragEnd","chrome","storage","local","set","windowPosition","top","right","drag","preventDefault","transform","concat","addEventListener","makeWindowDraggable","setTimeout","updateInfoWindow","arguments","length","undefined","info","getTradingInfo","results","parseBacktestResults","content","innerHTML","symbol","interval","isStrategySettingsDetected","isTrackingMode","num","netProfit","isNaN","formatUSDT","formatPercent","netProfitPercent","totalTrades","percentProfitable","decimals","toFixed","formatNumber","profitFactor","maxDrawdown","maxDrawdownPercent","avgTrade","avgTradePercent","avgBarsInTrade","openButton","querySelector","openStrategySettings","detectButton","detectStrategySettings","symbolElement","intervalElement","textContent","trim","error","strategySettingsSelector","strategyButtonIndex","DEFAULT_SETTINGS_BUTTON_SELECTOR","container","cells","querySelectorAll","forEach","cell","_cell$querySelector","_cell$querySelector2","_cell$querySelector3","title","value","additionalPercent","parseFloat","replace","parseInt","checkDefaultSettingsButton","defaultButton","strategySettingsDetected","enable","simulateClick","allButtons","Array","from","settingsButton","showNotification","element","clickEvent","MouseEvent","bubbles","cancelable","view","dispatchEvent","mouseDownEvent","mouseUpEvent","click","showInfoWindow","waitForBacktestResults","event","class","dataName","getAttribute","role","ariaLabel","closest","stopPropagation","stopImmediatePropagation","returnValue","matches","buttonIndex","indexOf","removeEventListener","removeChild","message","notification","remove","runtime","onMessage","addListener","request","sender","sendResponse","show","backtestObserver","disconnect","containerSearchInterval","clearInterval","success","get","result","lastUrl","location","href","lastSymbol","lastInterval","setInterval","currentUrl","resultsCheckInterval","offsetParent","startValuesObserver","valueElements","MutationObserver","mutations","_step","needsUpdate","_iterator","_createForOfIteratorHelper","s","n","done","mutation","targetElement","parentElement","classList","contains","oldValue","newValue","err","f","updateResults","observe","characterData","characterDataOldValue","subtree","childList","findAndObserveContainer","startBacktestObserver"],"sourceRoot":""}